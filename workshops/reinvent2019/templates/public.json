{
  "Resources": {
    "AssetBucket": {"Type": "AWS::S3::Bucket", "Properties": {}},
    "AssetClear": {
      "Type": "Custom::S3Clear",
      "DependsOn": ["CFNInvokePolicy"],
      "Condition": "BuildExamples",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": {"Ref": "AssetBucket"}
      }
    },
    "AssetZipVersion": {
      "Condition": "BuildExamples",
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": "aws-bigdata-blog",
        "Key": {
          "Fn::Join": ["", ["artifacts/aws-ai-qna-bot210", "/assets.zip"]]
        },
        "BuildDate": "2018-07-23T13:52:42.763Z"
      }
    },
    "AssetUnzip": {
      "Type": "Custom::S3Unzip",
      "Condition": "BuildExamples",
      "DependsOn": ["AssetClear"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "SrcBucket": "aws-bigdata-blog",
        "Key": {
          "Fn::Join": ["", ["artifacts/aws-ai-qna-bot210", "/assets.zip"]]
        },
        "DstBucket": {"Ref": "AssetBucket"},
        "version": {"Ref": "AssetZipVersion"}
      }
    },
    "VersionLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\nvar aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.handler = function(event, context) {\n    console.log(JSON.stringify(event,null,2))\n    if(event.RequestType!==\"Delete\"){\n        s3.headObject({\n            Bucket:event.ResourceProperties.Bucket,\n            Key:event.ResourceProperties.Key\n        }).promise()\n        .then(result=>response.send(event, context, response.SUCCESS,{\n            version:result.VersionId ? result.VersionId : 1\n        }))\n        .catch(x=>{\n            console.log(x)\n            response.send(event, context, response.FAILED)\n        })\n    }else{\n        response.send(event, context, response.SUCCESS)\n    }\n}\n\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "3008",
        "Role": {"Fn::GetAtt": ["CFNLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Tags": [{"Key": "Type", "Value": "CustomResource"}]
      }
    },
    "CFNVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["VersionLambda", "Arn"]},
        "Bucket": "aws-bigdata-blog",
        "Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/cfn.zip"},
        "BuildDate": "2018-07-23T13:52:42.764Z"
      }
    },
    "CFNLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {
            "Fn::Join": ["", ["artifacts/aws-ai-qna-bot210", "/lambda/cfn.zip"]]
          },
          "S3ObjectVersion": {"Fn::GetAtt": ["CFNVersion", "version"]}
        },
        "Handler": "index.handler",
        "MemorySize": "3008",
        "Role": {"Fn::GetAtt": ["CFNLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 60,
        "Tags": [{"Key": "Type", "Value": "CustomResource"}]
      }
    },
    "CFNInvokePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["lambda:InvokeFunction"],
              "Resource": [{"Fn::GetAtt": ["CFNLambda", "Arn"]}]
            }
          ]
        },
        "Roles": [{"Ref": "CFNLambdaRole"}]
      }
    },
    "CognitoDomain": {
      "Type": "Custom::CognitoDomain",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "UserPool": {"Ref": "UserPool"}
      }
    },
    "CognitoLoginClient": {
      "Type": "Custom::CognitoLogin",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "UserPool": {"Ref": "UserPool"},
        "ClientId": {"Ref": "ClientClient"},
        "LoginCallbackUrls": [{"Fn::GetAtt": ["Urls", "Client"]}],
        "CSS": ".logo-customizable{max-width:60%;max-height:30%}.banner-customizable{padding:25px 0px 25px 0px;background-color:lightgray}.label-customizable{font-weight:410}.textDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.idpDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.legalText-customizable{color:#747474;font-size:11px}.submitButton-customizable{font-size:14px;font-weight:bold;margin:20px 0px 10px 0px;height:40px;width:100%;color:#fff;background-color:#337ab7}.submitButton-customizable:hover{color:#fff;background-color:#286090}.errorMessage-customizable{padding:5px;font-size:14px;width:100%;background:#F5F5F5;border:2px solid #D64958;color:#D64958}.inputField-customizable{width:100%;height:34px;color:#555;background-color:#fff;border:1px solid #ccc}.inputField-customizable:focus{border-color:#66afe9;outline:0}.idpButton-customizable{height:41px;width:100%;width:100%;text-align:center;margin-bottom:15px;color:#fff;background-color:#5bc0de;border-color:#46b8da}.idpButton-customizable:hover{color:#fff;background-color:#31b0d5}.socialButton-customizable{height:40px;text-align:left;width:100%;margin-bottom:15px}.redirect-customizable{text-align:center}.passwordCheck-notValid-customizable{color:#DF3312}.passwordCheck-valid-customizable{color:#19BF00}.background-customizable{background-color:#fff}\n"
      }
    },
    "CognitoLoginDesigner": {
      "Type": "Custom::CognitoLogin",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "UserPool": {"Ref": "UserPool"},
        "ClientId": {"Ref": "ClientDesigner"},
        "LoginCallbackUrls": [{"Fn::GetAtt": ["Urls", "Designer"]}],
        "CSS": ".logo-customizable{max-width:60%;max-height:30%}.banner-customizable{padding:25px 0px 25px 0px;background-color:lightgray}.label-customizable{font-weight:410}.textDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.idpDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.legalText-customizable{color:#747474;font-size:11px}.submitButton-customizable{font-size:14px;font-weight:bold;margin:20px 0px 10px 0px;height:40px;width:100%;color:#fff;background-color:#337ab7}.submitButton-customizable:hover{color:#fff;background-color:#286090}.errorMessage-customizable{padding:5px;font-size:14px;width:100%;background:#F5F5F5;border:2px solid #D64958;color:#D64958}.inputField-customizable{width:100%;height:34px;color:#555;background-color:#fff;border:1px solid #ccc}.inputField-customizable:focus{border-color:#66afe9;outline:0}.idpButton-customizable{height:41px;width:100%;width:100%;text-align:center;margin-bottom:15px;color:#fff;background-color:#5bc0de;border-color:#46b8da}.idpButton-customizable:hover{color:#fff;background-color:#31b0d5}.socialButton-customizable{height:40px;text-align:left;width:100%;margin-bottom:15px}.redirect-customizable{display:none;text-align:center}.passwordCheck-notValid-customizable{color:#DF3312}.passwordCheck-valid-customizable{color:#19BF00}.background-customizable{background-color:#fff}\n"
      }
    },
    "DesignerLogin": {
      "Type": "Custom::CognitoUrl",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "adad": "adaad",
        "ClientId": {"Ref": "ClientDesigner"},
        "Domain": {"Ref": "CognitoDomain"},
        "LoginRedirectUrl": {"Fn::GetAtt": ["Urls", "Designer"]},
        "response_type": "code"
      }
    },
    "ClientLogin": {
      "Type": "Custom::CognitoUrl",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "ClientId": {"Ref": "ClientClient"},
        "Domain": {"Ref": "CognitoDomain"},
        "LoginRedirectUrl": {"Fn::GetAtt": ["Urls", "Client"]},
        "response_type": "token"
      }
    },
    "User": {
      "Type": "AWS::Cognito::UserPoolUser",
      "DependsOn": [
        "SignupPermision",
        "MessagePermision",
        "ElasticsearchDomainUpdate",
        "Kibana",
        "KibanaRoleAttachment",
        "RoleAttachment"
      ],
      "Properties": {
        "DesiredDeliveryMediums": ["EMAIL"],
        "UserAttributes": [{"Name": "email", "Value": {"Ref": "Email"}}],
        "Username": {"Ref": "Username"},
        "UserPoolId": {"Ref": "UserPool"}
      }
    },
    "UserToGroup": {
      "Type": "AWS::Cognito::UserPoolUserToGroupAttachment",
      "Properties": {
        "GroupName": {"Ref": "Admins"},
        "Username": {"Ref": "User"},
        "UserPoolId": {"Ref": "UserPool"}
      }
    },
    "IdPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Properties": {
        "IdentityPoolName": "QnabotUserPool",
        "AllowUnauthenticatedIdentities": true,
        "CognitoIdentityProviders": [
          {
            "ClientId": {"Ref": "ClientDesigner"},
            "ProviderName": {"Fn::GetAtt": ["UserPool", "ProviderName"]},
            "ServerSideTokenCheck": true
          },
          {
            "ClientId": {"Ref": "ClientClient"},
            "ProviderName": {"Fn::GetAtt": ["UserPool", "ProviderName"]},
            "ServerSideTokenCheck": true
          }
        ]
      }
    },
    "KibanaIdPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Properties": {
        "IdentityPoolName": "QnABotUserPool",
        "AllowUnauthenticatedIdentities": false
      }
    },
    "KibanaRoleAttachment": {
      "Type": "Custom::CognitoRole",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "IdentityPoolId": {"Ref": "KibanaIdPool"},
        "Roles": {
          "authenticated": {"Fn::GetAtt": ["UserRole", "Arn"]},
          "unauthenticated": {"Fn::GetAtt": ["UnauthenticatedRole", "Arn"]}
        },
        "RoleMappings": [
          {
            "ClientId": {"Fn::GetAtt": ["KibanaClient", "ClientId"]},
            "UserPool": {"Ref": "UserPool"},
            "Type": "Rules",
            "AmbiguousRoleResolution": "Deny",
            "RulesConfiguration": {
              "Rules": [
                {
                  "Claim": "cognito:groups",
                  "MatchType": "Contains",
                  "Value": "Admin",
                  "RoleARN": {"Fn::GetAtt": ["KibanaRole", "Arn"]}
                }
              ]
            }
          }
        ]
      }
    },
    "RoleAttachment": {
      "Type": "Custom::CognitoRole",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "IdentityPoolId": {"Ref": "IdPool"},
        "Roles": {
          "authenticated": {"Fn::GetAtt": ["UserRole", "Arn"]},
          "unauthenticated": {"Fn::GetAtt": ["UnauthenticatedRole", "Arn"]}
        },
        "RoleMappings": [
          {
            "ClientId": {"Ref": "ClientClient"},
            "UserPool": {"Ref": "UserPool"},
            "Type": "Rules",
            "AmbiguousRoleResolution": "AuthenticatedRole",
            "RulesConfiguration": {
              "Rules": [
                {
                  "Claim": "cognito:groups",
                  "MatchType": "Contains",
                  "Value": "Admin",
                  "RoleARN": {"Fn::GetAtt": ["UserRole", "Arn"]}
                }
              ]
            }
          },
          {
            "ClientId": {"Ref": "ClientDesigner"},
            "UserPool": {"Ref": "UserPool"},
            "Type": "Rules",
            "AmbiguousRoleResolution": "Deny",
            "RulesConfiguration": {
              "Rules": [
                {
                  "Claim": "cognito:groups",
                  "MatchType": "Contains",
                  "Value": "Admin",
                  "RoleARN": {"Fn::GetAtt": ["AdminRole", "Arn"]}
                }
              ]
            }
          }
        ]
      }
    },
    "UserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": {
          "Fn::Join": ["-", ["UserPool", {"Ref": "AWS::StackName"}]]
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": {"Fn::If": ["AdminSignUp", true, false]},
          "InviteMessageTemplate": {
            "EmailMessage": {
              "Fn::Sub": "<p>Hello {username},\n<p>Welcome to QnABot! Your temporary password is:\n<p>     {####} \n<p>\n<p>When the CloudFormation stack is COMPLETE, use the link below to log in to QnABot Content Designer, set your permanent password, and start building your bot!\n<p>     ${ApiUrl.Name}/pages/designer\n<p>\n<p>Good luck!\n<p>QnABot (www.amazon.com/qnabot)\n"
            },
            "EmailSubject": "Welcome to QnABot!"
          }
        },
        "AliasAttributes": ["email"],
        "AutoVerifiedAttributes": ["email"],
        "Schema": [
          {
            "Required": true,
            "Name": "email",
            "AttributeDataType": "String",
            "Mutable": true
          }
        ],
        "LambdaConfig": {
          "CustomMessage": {"Fn::GetAtt": ["MessageLambda", "Arn"]},
          "PreSignUp": {"Fn::GetAtt": ["SignupLambda", "Arn"]}
        }
      }
    },
    "KibanaClient": {
      "Type": "Custom::ESCognitoClient",
      "DependsOn": ["ElasticsearchDomainUpdate"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "UserPool": {"Ref": "UserPool"}
      }
    },
    "ClientDesigner": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": {
          "Fn::Join": ["-", ["UserPool", {"Ref": "AWS::StackName"}, "designer"]]
        },
        "GenerateSecret": false,
        "UserPoolId": {"Ref": "UserPool"}
      }
    },
    "ClientClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": {
          "Fn::Join": ["-", ["UserPool", {"Ref": "AWS::StackName"}, "client"]]
        },
        "GenerateSecret": false,
        "UserPoolId": {"Ref": "UserPool"}
      }
    },
    "Users": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {"GroupName": "Users", "UserPoolId": {"Ref": "UserPool"}}
    },
    "Admins": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {"GroupName": "Admins", "UserPoolId": {"Ref": "UserPool"}}
    },
    "ElasticsearchDomain": {
      "Type": "AWS::Elasticsearch::Domain",
      "Condition": "CreateDomain",
      "Properties": {
        "ElasticsearchClusterConfig": {
          "DedicatedMasterEnabled": false,
          "InstanceCount": 2,
          "InstanceType": "t2.small.elasticsearch",
          "ZoneAwarenessEnabled": "true"
        },
        "EBSOptions": {
          "EBSEnabled": true,
          "VolumeSize": 10,
          "VolumeType": "gp2"
        },
        "ElasticsearchVersion": "5.1",
        "SnapshotOptions": {"AutomatedSnapshotStartHour": "0"},
        "AdvancedOptions": {"rest.action.multi.allow_explicit_index": "true"}
      }
    },
    "ElasticsearchDomainUpdate": {
      "Type": "Custom::ElasticSearchUpdate",
      "DependsOn": ["CognitoDomain"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "DomainName": {"Fn::GetAtt": ["ESVar", "ESDomain"]},
        "CognitoOptions": {
          "Enabled": true,
          "IdentityPoolId": {"Ref": "KibanaIdPool"},
          "RoleArn": {"Fn::GetAtt": ["ESCognitoRole", "Arn"]},
          "UserPoolId": {"Ref": "UserPool"}
        },
        "AccessPolicies": {
          "Fn::Sub": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"CognitoAuth\",\"Principal\":{\"AWS\":\"${KibanaRole.Arn}\"},\"Effect\":\"Allow\",\"Action\":\"es:ESHttp*\",\"Resource\":\"${ESVar.ESArn}/*\"}]}"
        }
      }
    },
    "ESCognitoRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "es.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/AmazonESCognitoAccess"]
      }
    },
    "ESInfo": {
      "Type": "Custom::ESProxy",
      "Condition": "DontCreateDomain",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
        "name": "EMPTY"
      }
    },
    "ESInfoLambda": {
      "Type": "AWS::Lambda::Function",
      "Condition": "DontCreateDomain",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\nvar aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar es=new aws.ES()\n\nexports.handler = function(event, context) {\n    console.log(JSON.stringify(event,null,2))\n\n    if(event.RequestType!==\"Delete\"){\n        es.describeElasticsearchDomain({\n            DomainName:event.ResourceProperties.name\n        }).promise()\n        .then(info=>{\n            response.send(event, context, response.SUCCESS,{\n                Name:DomainStatus.DomainName,\n                Arn:DomainStatus.ARN,\n                Endpoint:DomainStatus.Endpoints\n            })\n        })\n        .catch(x=>{\n            console.log(x)\n            response.send(event, context, response.FAILED)\n        })\n       \n    }else{\n        response.send(event, context, response.SUCCESS)\n    }\n}\n\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "CustomResource"}]
      }
    },
    "FeedbackFirehose": {
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "DeliveryStreamType": "DirectPut",
        "ElasticsearchDestinationConfiguration": {
          "BufferingHints": {"IntervalInSeconds": 60, "SizeInMBs": 5},
          "DomainARN": {"Fn::GetAtt": ["ESVar", "ESArn"]},
          "IndexName": {"Fn::Sub": "${ESVar.FeedbackIndex}"},
          "IndexRotationPeriod": "NoRotation",
          "RetryOptions": {"DurationInSeconds": 300},
          "RoleARN": {"Fn::GetAtt": ["FirehoseESS3Role", "Arn"]},
          "S3BackupMode": "AllDocuments",
          "S3Configuration": {
            "BucketARN": {"Fn::GetAtt": ["MetricsBucket", "Arn"]},
            "BufferingHints": {"IntervalInSeconds": 60, "SizeInMBs": 5},
            "Prefix": "feedback/",
            "CompressionFormat": "UNCOMPRESSED",
            "RoleARN": {"Fn::GetAtt": ["FirehoseESS3Role", "Arn"]}
          },
          "TypeName": "feedback"
        }
      }
    },
    "GeneralFirehose": {
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "Properties": {
        "DeliveryStreamType": "DirectPut",
        "ElasticsearchDestinationConfiguration": {
          "BufferingHints": {"IntervalInSeconds": 60, "SizeInMBs": 5},
          "DomainARN": {"Fn::GetAtt": ["ESVar", "ESArn"]},
          "IndexName": {"Fn::Sub": "${ESVar.MetricsIndex}"},
          "IndexRotationPeriod": "NoRotation",
          "RetryOptions": {"DurationInSeconds": 300},
          "RoleARN": {"Fn::GetAtt": ["FirehoseESS3Role", "Arn"]},
          "S3BackupMode": "AllDocuments",
          "S3Configuration": {
            "BucketARN": {"Fn::GetAtt": ["MetricsBucket", "Arn"]},
            "Prefix": "metrics/",
            "BufferingHints": {"IntervalInSeconds": 60, "SizeInMBs": 5},
            "CompressionFormat": "UNCOMPRESSED",
            "RoleARN": {"Fn::GetAtt": ["FirehoseESS3Role", "Arn"]}
          },
          "TypeName": "general"
        }
      }
    },
    "MetricsBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Delete",
      "Properties": {"Tags": [{"Key": "Use", "Value": "Metrics"}]}
    },
    "MetricsBucketClear": {
      "Type": "Custom::S3Clear",
      "DependsOn": ["CFNInvokePolicy"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": {"Ref": "MetricsBucket"}
      }
    },
    "FirehoseESS3Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "firehose.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:GetBucketLocation",
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    {"Fn::GetAtt": ["MetricsBucket", "Arn"]},
                    {
                      "Fn::Join": [
                        "",
                        [{"Fn::GetAtt": ["MetricsBucket", "Arn"]}, "/*"]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction",
                    "lambda:GetFunctionConfiguration"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":function:%FIREHOSE_DEFAULT_FUNCTION%:%FIREHOSE_DEFAULT_VERSION%"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Action": [
                    "es:DescribeElasticsearchDomain",
                    "es:DescribeElasticsearchDomains",
                    "es:DescribeElasticsearchDomainConfig",
                    "es:ESHttpPost",
                    "es:ESHttpPut",
                    "es:ESHttpGet"
                  ],
                  "Resource": [
                    {"Fn::GetAtt": ["ESVar", "ESArn"]},
                    {
                      "Fn::Join": [
                        "",
                        [{"Fn::GetAtt": ["ESVar", "ESArn"]}, "/*"]
                      ]
                    }
                  ]
                },
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Action": ["logs:PutLogEvents"],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":log-group:/aws/kinesisfirehose/*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            },
            "PolicyName": "QnAFirehose"
          }
        ]
      }
    },
    "ESCFNProxyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {
            "Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/proxy-es.zip"
          },
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Handler": "index.resource",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "CustomResource"}]
      }
    },
    "MetricsIndex": {
      "Type": "Custom::ESProxy",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["ESCFNProxyLambda", "Arn"]},
        "NoUpdate": true,
        "create": {
          "endpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "path": {"Fn::Sub": "/${ESVar.MetricsIndex}"},
          "method": "PUT",
          "body": {"Fn::Sub": "{\"settings\":{}}"}
        },
        "delete": {
          "endpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "path": {"Fn::Sub": "/${ESVar.MetricsIndex}"},
          "method": "DELETE"
        }
      }
    },
    "FeedbackIndex": {
      "Type": "Custom::ESProxy",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["ESCFNProxyLambda", "Arn"]},
        "NoUpdate": true,
        "create": {
          "endpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "path": {"Fn::Sub": "/${ESVar.FeedbackIndex}"},
          "method": "PUT",
          "body": {"Fn::Sub": "{\"settings\":{}}"}
        },
        "delete": {
          "endpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "path": {"Fn::Sub": "/${ESVar.FeedbackIndex}"},
          "method": "DELETE"
        }
      }
    },
    "Index": {
      "Type": "Custom::ESProxy",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["ESCFNProxyLambda", "Arn"]},
        "NoUpdate": true,
        "create": {
          "endpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "path": {"Fn::Sub": "/${Var.index}"},
          "method": "PUT",
          "body": {
            "Fn::Sub": "{\"settings\":{},\"mappings\":{\"${Var.QnAType}\":{\"_meta\":{\"schema\":{\"type\":\"object\",\"description\":\"Question and Answer document\",\"properties\":{\"qid\":{\"type\":\"string\",\"title\":\"Item ID\",\"description\":\"Assign a unique identifier for this item.\",\"maxLength\":100},\"q\":{\"title\":\"Questions\",\"description\":\"Enter one or more questions that a user might ask.\",\"type\":\"array\",\"items\":{\"title\":\"Question\",\"type\":\"string\",\"maxLength\":140}},\"a\":{\"type\":\"string\",\"title\":\"Answer\",\"description\":\"Enter the answer you want to be returned when the user asks one of the above questions.\",\"maxLength\":8000},\"alt\":{\"type\":\"object\",\"description\":\"Alternate Answers\",\"properties\":{\"ssml\":{\"type\":\"string\",\"title\":\"SSML Answer\",\"description\":\"Alternate SSML answer\",\"maxLength\":8000},\"markdown\":{\"type\":\"string\",\"title\":\"Markdown Answer\",\"description\":\"Alternate Markdown answer\",\"maxLength\":8000}}},\"t\":{\"type\":\"string\",\"description\":\"Assign a topic to this item, to support follow up questions on the same topic.\",\"title\":\"Topic\"},\"next\":{\"title\":\"Next Document\",\"description\":\"If applicable, enter the QID of the document(s) that is/are next in the sequence, otherwise leave blank. Be careful; if you set this field to an earlier document in the sequence, you might make your sequence loop forever, which would not be fun!  You can add more QIDs after the first, but they won't do anything at the moment.\",\"type\":\"string\",\"maxLength\":100},\"r\":{\"title\":\"Response card\",\"description\":\"Attach images to your answer\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"title\":\"Card Title\",\"description\":\"Required\",\"maxLength\":80},\"subTitle\":{\"type\":\"string\",\"title\":\"Card Subtitle\",\"description\":\"Optional\",\"maxLength\":80},\"imageUrl\":{\"type\":\"string\",\"description\":\"Required\",\"title\":\"Card Image Url\",\"format\":\"url\",\"maxLength\":2000}},\"dependencies\":{\"title\":[\"imageUrl\"]}},\"l\":{\"type\":\"string\",\"description\":\"Enter your lambda function name/ARN to dynamically create or modify answers, or to redirect to a different question.\",\"title\":\"Lambda Hook\"},\"args\":{\"title\":\"Lambda Hook Arguments\",\"description\":\"If you named a lambda hook above and it requires additional information beyond what you've entered for this document, enter that information here.  You should not add anything here unless the lambda hook you named has been specifically coded to handle it.\",\"type\":\"array\",\"items\":{\"title\":\"Argument\",\"type\":\"string\",\"maxLength\":140}}},\"required\":[\"qid\",\"q\",\"a\"]}},\"properties\":{\"qid\":{\"type\":\"keyword\"},\"questions\":{\"type\":\"nested\",\"properties\":{\"q\":{\"type\":\"text\",\"analyzer\":\"english\"}}},\"a\":{\"type\":\"text\",\"analyzer\":\"english\"},\"t\":{\"type\":\"text\",\"analyzer\":\"whitespace\"},\"r\":{\"properties\":{\"imageUrl\":{\"type\":\"keyword\"},\"title\":{\"type\":\"text\"}}},\"l\":{\"type\":\"keyword\"}}},\"${Var.QuizType}\":{\"_meta\":{\"schema\":{\"type\":\"object\",\"description\":\"Quiz documents\",\"properties\":{\"qid\":{\"type\":\"string\",\"title\":\"Quiz Question ID\",\"description\":\"Assign a unique identifier for this item.  This should not be the same as any other question or document's.\",\"maxLength\":100},\"question\":{\"type\":\"string\",\"title\":\"Question\",\"description\":\"Enter a question that the bot will ask the user.\",\"maxLength\":140},\"correctAnswers\":{\"title\":\"Correct Answers\",\"type\":\"array\",\"description\":\"Enter correct answer options for this question.  Any of these options will be graded as correct if the user selects them.  These will be presented to the user in randomized order alongside the incorrect answer(s) you enter below.\",\"items\":{\"title\":\"Correct Answer\",\"type\":\"string\",\"maxLength\":140}},\"incorrectAnswers\":{\"title\":\"Incorrect Answers\",\"description\":\"Enter incorrect answer options for this question.  These will be presented to the user in randomized order alongside the correct answer(s) you entered above.\",\"type\":\"array\",\"items\":{\"title\":\"Answer\",\"type\":\"string\",\"maxLength\":140}},\"responses\":{\"title\":\"Custom Responses\",\"description\":\"Enter custom responses for correct answers, incorrect answers, and the response returned on finishing the quiz.\",\"type\":\"object\",\"properties\":{\"correct\":{\"title\":\"Correct Answer Response\",\"description\":\"Response that will be returned to the user on a correct response.\",\"type\":\"string\",\"maxLength\":140},\"incorrect\":{\"title\":\"Incorrect Answer Response\",\"description\":\"Response that will be returned to the user on a incorrect response.\",\"type\":\"string\",\"maxLength\":140},\"end\":{\"title\":\"End Quiz Response\",\"description\":\"The response that will be returned to the user end the end of the quiz if this is the last question\",\"type\":\"string\",\"maxLength\":140}}},\"next\":{\"title\":\"Next Questions\",\"description\":\"Enter the QID of the next question in the quiz.  If the field is left blank then the quiz will end after this question.\",\"type\":\"array\",\"items\":{\"title\":\"nextQuestion\",\"type\":\"string\",\"maxLength\":100}},\"r\":{\"title\":\"Response card\",\"description\":\"Use these fields to attach images to your question.\",\"type\":\"object\",\"properties\":{\"title\":{\"type\":\"string\",\"title\":\"Card Title\",\"description\":\"Required\",\"maxLength\":80},\"subTitle\":{\"type\":\"string\",\"title\":\"Card Subtitle\",\"description\":\"Optional\",\"maxLength\":80},\"imageUrl\":{\"type\":\"string\",\"description\":\"Required\",\"title\":\"Card Image Url\",\"format\":\"url\",\"maxLength\":2000}},\"required\":[\"title\",\"imageUrl\"]},\"quiz\":{\"type\":\"string\",\"title\":\"Quiz ID\",\"description\":\"ID of the quiz this question is a member of\",\"maxLength\":100}},\"required\":[\"qid\",\"question\",\"incorrectAnswers\",\"correctAnswers\"]}},\"properties\":{\"qid\":{\"type\":\"keyword\"},\"question\":{\"type\":\"string\",\"analyzer\":\"english\"},\"incorrectAnswers\":{\"type\":\"text\",\"analyzer\":\"english\"},\"correctAnswers\":{\"type\":\"text\",\"analyzer\":\"english\"}}}}}"
          }
        },
        "delete": {
          "endpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "path": {"Fn::Sub": "/${Var.index}"},
          "method": "DELETE"
        }
      }
    },
    "Kibana": {
      "Type": "Custom::Kibana",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "address": {"Fn::GetAtt": ["ESVar", "ESAddress"]}
      }
    },
    "KibanaConfig": {
      "Type": "Custom::ESProxy",
      "DependsOn": ["Kibana"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["ESCFNProxyLambda", "Arn"]},
        "create": {
          "endpoint": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "path": {"Fn::Sub": "_bulk"},
          "method": "POST",
          "body": [
            {"index": {"_index": ".kibana", "_type": "config", "_id": "5.1.1"}},
            {
              "buildNum": 14566,
              "defaultIndex": {"Fn::Sub": "${Var.index}"},
              "discover:aggs:terms:size": 20
            },
            {
              "index": {
                "_index": ".kibana",
                "_type": "index-pattern",
                "_id": {"Fn::Sub": "${Var.index}"}
              }
            },
            {
              "title": {"Fn::Sub": "${Var.index}"},
              "fields": "[{\"name\":\"incorrectAnswers\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"question\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"qid\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":false,\"aggregatable\":false},{\"name\":\"_source\",\"type\":\"_source\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"correctAnswers\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"a\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"r.title\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"questions.q\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"l\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":false,\"aggregatable\":false},{\"name\":\"r.imageUrl\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":false,\"aggregatable\":false},{\"name\":\"t\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"_id\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"_type\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":true,\"aggregatable\":true},{\"name\":\"_index\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"_score\",\"type\":\"number\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false}]"
            },
            {
              "index": {
                "_index": ".kibana",
                "_type": "index-pattern",
                "_id": {"Fn::Sub": "${Var.index}-metrics"}
              }
            },
            {
              "title": {"Fn::Sub": "${Var.index}-metrics"},
              "timeFieldName": "datetime",
              "fields": "[{\"name\":\"entireResponse.session.previous.a.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.result.type\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._event.currentIntent.name.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._info.es.service.qid.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.currentIntent.confirmationStatus.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.card.title.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.currentIntent.slots.slot.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._type\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._event.invocationSource.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"clientType\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._event.currentIntent.slotDetails.slot.resolutions.value.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.session.queryLambda\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._event.bot.alias.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._info.es.index\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"utterance\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._info.es.service.qid\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._event.userId.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.outputDialogMode.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest.session.previous.q.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.result.questions.q.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.message.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.card.title\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"entireRequest._info.es.address\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"clientType.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.type.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.invocationSource\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"_source\",\"type\":\"_source\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"entireRequest._event.bot.alias\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest.session.queryLambda\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._info.es.type.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.card.url\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"entireResponse.result.r.imageUrl\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"entireResponse.session.previous.q.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"qid\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._event.bot.name\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireResponse.session.appContext.altMessages.html.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":false,\"aggregatable\":false},{\"name\":\"entireRequest._info.es.address.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.session.previous.q\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._event.currentIntent.slotDetails.slot.originalValue\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireResponse.session.queryLambda.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.sessionAttributes.navigation.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"answer.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.session.appContext.altMessages.html\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._event.outputDialogMode\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._type.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.sessionAttributes.queryLambda\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"answer\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._event.messageVersion\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireResponse.card.text\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"entireRequest._event.sessionAttributes.queryLambda.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.type\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireResponse.result.l\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._event.sessionAttributes.previous.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.result.r.title.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.session.previous.qid.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"utterance.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.result.l.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._info.es.service.proxy.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"datetime\",\"type\":\"date\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.userId\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest.session.previous.qid\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireResponse.result.a.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.card.send\",\"type\":\"boolean\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.bot.name.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.currentIntent.name\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireResponse.result.a\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireResponse.result.r.imageUrl.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._info.es.index.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.message\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireResponse.card.url.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.session.navigation.next\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"entireRequest._info.es.service.proxy\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireResponse.session.previous.a\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._event.currentIntent.slotDetails.slot.originalValue.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.result.r.title\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"entireResponse.session.navigation.hasParent\",\"type\":\"boolean\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest.session.previous.qid.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.card.text.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.messageVersion.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.inputTranscript\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireResponse.result.questions.q\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireResponse.result.qid.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.bot.version.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"topic\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"entireResponse.result.type.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.sessionAttributes.navigation\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest.session.previous.q\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireResponse.session.previous.qid\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest.question\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireResponse.session.navigation.next.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.currentIntent.slotDetails.slot.resolutions.value\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest.session.navigation.next.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest.session.previous.a\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest.session.queryLambda.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.currentIntent.confirmationStatus\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest.question.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._event.sessionAttributes.previous\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest.session.navigation.hasParent\",\"type\":\"boolean\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireRequest._info.es.type\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest.session.navigation.next\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"entireRequest._event.inputTranscript.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"topic.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"entireResponse.result.qid\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._event.currentIntent.slots.slot\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest._event.bot.version\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"entireRequest.session.previous.a.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"qid.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"_id\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"_type\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":true,\"aggregatable\":true},{\"name\":\"_index\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"_score\",\"type\":\"number\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false}]"
            },
            {
              "index": {
                "_index": ".kibana",
                "_type": "index-pattern",
                "_id": {"Fn::Sub": "${Var.index}-feedback"}
              }
            },
            {
              "title": {"Fn::Sub": "${Var.index}-feedback"},
              "timeFieldName": "datetime",
              "fields": "[{\"name\":\"markdown.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"answer.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"utterance.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"qid\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"feedback\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"datetime\",\"type\":\"date\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"feedback.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"answer\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"markdown\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"_source\",\"type\":\"_source\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"utterance\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":true,\"doc_values\":false,\"searchable\":true,\"aggregatable\":false},{\"name\":\"qid.keyword\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":true,\"analyzed\":false,\"doc_values\":true,\"searchable\":true,\"aggregatable\":true},{\"name\":\"_id\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"_type\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":true,\"aggregatable\":true},{\"name\":\"_index\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false},{\"name\":\"_score\",\"type\":\"number\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false,\"searchable\":false,\"aggregatable\":false}]"
            },
            {
              "index": {
                "_index": ".kibana",
                "_type": "dashboard",
                "_id": "Default"
              }
            },
            {
              "title": "Default",
              "hits": 0,
              "description": "",
              "panelsJSON": "[{\"col\":9,\"id\":\"Client-types\",\"panelIndex\":3,\"row\":1,\"size_x\":4,\"size_y\":4,\"type\":\"visualization\"},{\"col\":1,\"id\":\"Requests\",\"panelIndex\":4,\"row\":1,\"size_x\":8,\"size_y\":4,\"type\":\"visualization\"},{\"col\":1,\"id\":\"Incorrect-feedback-wordcloud\",\"panelIndex\":5,\"row\":9,\"size_x\":6,\"size_y\":3,\"type\":\"visualization\"},{\"col\":7,\"id\":\"Correct-feedback-wordcloud\",\"panelIndex\":6,\"row\":9,\"size_x\":6,\"size_y\":3,\"type\":\"visualization\"},{\"col\":3,\"id\":\"Logged-Utterances\",\"panelIndex\":7,\"row\":5,\"size_x\":12,\"size_y\":4,\"type\":\"visualization\"}]",
              "optionsJSON": "{\"darkTheme\":false}",
              "uiStateJSON": "{}",
              "version": 1,
              "timeRestore": false,
              "timeFrom": "now/w",
              "timeTo": "now/w",
              "kibanaSavedObjectMeta": {
                "searchSourceJSON": "{\"filter\":[{\"query\":{\"query_string\":{\"query\":\"*\",\"analyze_wildcard\":true}}}]}"
              }
            },
            {
              "index": {
                "_index": ".kibana",
                "_type": "visualization",
                "_id": "Logged-Utterances"
              }
            },
            {
              "title": "Logged Utterances",
              "visState": "{\"title\":\"Logged Utterances\",\"type\":\"tagcloud\",\"params\":{\"scale\":\"linear\",\"orientation\":\"single\",\"minFontSize\":16,\"maxFontSize\":100,\"hideLabel\":true},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"segment\",\"params\":{\"field\":\"utterance.keyword\",\"size\":1000,\"order\":\"desc\",\"orderBy\":\"1\"}}],\"listeners\":{}}",
              "uiStateJSON": "{}",
              "description": "",
              "version": 1,
              "kibanaSavedObjectMeta": {
                "searchSourceJSON": {
                  "Fn::Sub": "{\"index\":\"${ESVar.MetricsIndex}\",\"query\":{\"query_string\":{\"query\":\"*\",\"analyze_wildcard\":true}},\"filter\":[]}"
                }
              }
            },
            {
              "index": {
                "_index": ".kibana",
                "_type": "visualization",
                "_id": "Feedback-by-QID-and-Utterance"
              }
            },
            {
              "title": "Feedback by QID and Utterance",
              "visState": "{\"title\":\"Feedback by QID and Utterance\",\"type\":\"histogram\",\"params\":{\"shareYAxis\":true,\"addTooltip\":true,\"addLegend\":true,\"legendPosition\":\"right\",\"scale\":\"linear\",\"mode\":\"stacked\",\"times\":[],\"addTimeMarker\":false,\"defaultYExtents\":false,\"setYExtents\":false,\"yAxis\":{}},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"group\",\"params\":{\"field\":\"feedback.keyword\",\"size\":1000,\"order\":\"desc\",\"orderBy\":\"_term\"}},{\"id\":\"3\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"split\",\"params\":{\"field\":\"utterance.keyword\",\"size\":1000,\"order\":\"desc\",\"orderBy\":\"1\",\"row\":true}},{\"id\":\"4\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"segment\",\"params\":{\"field\":\"qid.keyword\",\"size\":1000,\"order\":\"desc\",\"orderBy\":\"1\"}}],\"listeners\":{}}",
              "uiStateJSON": "{\"vis\":{\"legendOpen\":true}}",
              "description": "",
              "version": 1,
              "kibanaSavedObjectMeta": {
                "searchSourceJSON": {
                  "Fn::Sub": "{\"index\":\"${ESVar.FeedbackIndex}\",\"query\":{\"query_string\":{\"query\":\"*\",\"analyze_wildcard\":true}},\"filter\":[]}"
                }
              }
            },
            {
              "index": {
                "_index": ".kibana",
                "_type": "visualization",
                "_id": "Client-types"
              }
            },
            {
              "title": "Client Types",
              "visState": "{\"title\":\"client-types\",\"type\":\"pie\",\"params\":{\"shareYAxis\":true,\"addTooltip\":true,\"addLegend\":true,\"legendPosition\":\"right\",\"isDonut\":false},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"segment\",\"params\":{\"field\":\"clientType.keyword\",\"size\":5,\"order\":\"desc\",\"orderBy\":\"1\"}}],\"listeners\":{}}",
              "uiStateJSON": "{}",
              "description": "",
              "version": 1,
              "kibanaSavedObjectMeta": {
                "searchSourceJSON": {
                  "Fn::Sub": "{\"index\":\"${ESVar.MetricsIndex}\",\"query\":{\"query_string\":{\"query\":\"*\",\"analyze_wildcard\":true}},\"filter\":[]}"
                }
              }
            },
            {
              "index": {
                "_index": ".kibana",
                "_type": "visualization",
                "_id": "Requests"
              }
            },
            {
              "title": "Requests",
              "visState": "{\"title\":\"requests\",\"type\":\"histogram\",\"params\":{\"shareYAxis\":true,\"addTooltip\":true,\"addLegend\":true,\"legendPosition\":\"right\",\"scale\":\"linear\",\"mode\":\"stacked\",\"times\":[],\"addTimeMarker\":false,\"defaultYExtents\":false,\"setYExtents\":false,\"yAxis\":{}},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"date_histogram\",\"schema\":\"segment\",\"params\":{\"field\":\"datetime\",\"interval\":\"auto\",\"customInterval\":\"2h\",\"min_doc_count\":1,\"extended_bounds\":{},\"customLabel\":\"requests\"}}],\"listeners\":{}}",
              "uiStateJSON": "{}",
              "description": "",
              "version": 1,
              "kibanaSavedObjectMeta": {
                "searchSourceJSON": {
                  "Fn::Sub": "{\"index\":\"${ESVar.MetricsIndex}\",\"query\":{\"query_string\":{\"query\":\"*\",\"analyze_wildcard\":true}},\"filter\":[]}"
                }
              }
            },
            {
              "index": {
                "_index": ".kibana",
                "_type": "visualization",
                "_id": "Correct-feedback-wordcloud"
              }
            },
            {
              "title": "Anwsers with positive feedback",
              "visState": "{\"aggs\":[{\"enabled\":true,\"id\":\"1\",\"params\":{},\"schema\":\"metric\",\"type\":\"count\"},{\"enabled\":true,\"id\":\"2\",\"params\":{\"field\":\"utterance.keyword\",\"order\":\"desc\",\"orderBy\":\"1\",\"size\":5},\"schema\":\"segment\",\"type\":\"terms\"}],\"listeners\":{},\"params\":{\"maxFontSize\":72,\"minFontSize\":18,\"orientation\":\"single\",\"scale\":\"linear\"},\"title\":\"Anwsers with positive feedback\",\"type\":\"tagcloud\"}",
              "uiStateJSON": "{}",
              "description": "",
              "version": 1,
              "kibanaSavedObjectMeta": {
                "searchSourceJSON": {
                  "Fn::Sub": "{\"index\":\"${ESVar.FeedbackIndex}\",\"query\":{\"query_string\":{\"query\":\"feedback=correct\",\"analyze_wildcard\":true}},\"filter\":[]}"
                }
              }
            },
            {
              "index": {
                "_index": ".kibana",
                "_type": "visualization",
                "_id": "Incorrect-feedback-wordcloud"
              }
            },
            {
              "title": "Anwsers with negative feedback",
              "visState": "{\"aggs\":[{\"enabled\":true,\"id\":\"1\",\"params\":{},\"schema\":\"metric\",\"type\":\"count\"},{\"enabled\":true,\"id\":\"2\",\"params\":{\"field\":\"utterance.keyword\",\"order\":\"desc\",\"orderBy\":\"1\",\"size\":5},\"schema\":\"segment\",\"type\":\"terms\"}],\"listeners\":{},\"params\":{\"maxFontSize\":72,\"minFontSize\":18,\"orientation\":\"single\",\"scale\":\"linear\"},\"title\":\"Anwsers with negative feedback\",\"type\":\"tagcloud\"}",
              "uiStateJSON": "{}",
              "description": "",
              "version": 1,
              "kibanaSavedObjectMeta": {
                "searchSourceJSON": {
                  "Fn::Sub": "{\"index\":\"${ESVar.FeedbackIndex}\",\"query\":{\"query_string\":{\"query\":\"feedback=incorrect\",\"analyze_wildcard\":true}},\"filter\":[]}"
                }
              }
            }
          ]
        }
      }
    },
    "ExamplesStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "BuildExamples",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": "http://s3.amazonaws.com/aws-bigdata-blog/artifacts/aws-ai-qna-bot210/templates/examples.json"
        },
        "Parameters": {
          "QnAType": {"Fn::GetAtt": ["Var", "QnAType"]},
          "QuizType": {"Fn::GetAtt": ["Var", "QuizType"]},
          "Index": {"Fn::GetAtt": ["Var", "index"]},
          "ESAddress": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
          "BootstrapBucket": "aws-bigdata-blog",
          "BootstrapPrefix": "artifacts/aws-ai-qna-bot210",
          "FeedbackFirehose": {"Fn::GetAtt": ["FeedbackFirehose", "Arn"]},
          "FeedbackFirehoseName": {"Ref": "FeedbackFirehose"},
          "CFNLambda": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
          "CFNLambdaRole": {"Fn::GetAtt": ["CFNLambdaRole", "Arn"]},
          "ApiUrlName": {"Fn::GetAtt": ["ApiUrl", "Name"]},
          "AssetBucket": {"Ref": "AssetBucket"},
          "FulfillmentLambdaRole": {"Ref": "FulfillmentLambdaRole"},
          "QIDLambdaArn": {"Fn::GetAtt": ["ESQidLambda", "Arn"]}
        }
      }
    },
    "ExportBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {"NoncurrentVersionExpirationInDays": 1, "Status": "Enabled"},
            {
              "AbortIncompleteMultipartUpload": {"DaysAfterInitiation": 1},
              "Status": "Enabled"
            }
          ]
        },
        "VersioningConfiguration": {"Status": "Enabled"},
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": ["*"],
              "AllowedMethods": ["GET"],
              "AllowedOrigins": ["*"]
            }
          ]
        }
      }
    },
    "ExportClear": {
      "Type": "Custom::S3Clear",
      "DependsOn": ["CFNInvokePolicy"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": {"Ref": "ExportBucket"}
      }
    },
    "ExportTrigger": {
      "Type": "Custom::S3Lambda",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": {"Ref": "ExportBucket"},
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "LambdaFunctionArn": {"Fn::GetAtt": ["ExportStepLambda", "Arn"]},
              "Events": ["s3:ObjectCreated:*"],
              "Filter": {
                "Key": {"FilterRules": [{"Name": "prefix", "Value": "status"}]}
              }
            }
          ]
        }
      }
    },
    "ExportStepPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {"Fn::GetAtt": ["ExportStepLambda", "Arn"]},
        "Action": "lambda:InvokeFunction",
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {"Ref": "AWS::AccountId"},
        "SourceArn": {"Fn::Sub": "arn:aws:s3:::${ExportBucket}"}
      }
    },
    "ExportCodeVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": "aws-bigdata-blog",
        "Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/export.zip"},
        "BuildDate": "2018-07-23T13:52:42.889Z"
      }
    },
    "ExportStepLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/export.zip"},
          "S3ObjectVersion": {"Ref": "ExportCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Fn::GetAtt": ["Var", "index"]},
            "ES_ENDPOINT": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
            "ES_PROXY": {"Fn::GetAtt": ["ESProxyLambda", "Arn"]}
          }
        },
        "Handler": "index.step",
        "MemorySize": "320",
        "Role": {"Fn::GetAtt": ["ExportRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Export"}]
      }
    },
    "ExportRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          {"Ref": "ExportPolicy"}
        ]
      }
    },
    "ExportPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:*"],
              "Resource": [{"Fn::Sub": "arn:aws:s3:::${ExportBucket}*"}]
            },
            {
              "Effect": "Allow",
              "Action": ["lambda:InvokeFunction"],
              "Resource": [{"Fn::GetAtt": ["ESProxyLambda", "Arn"]}]
            }
          ]
        }
      }
    },
    "ImportBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [{"ExpirationInDays": 1, "Status": "Enabled"}]
        },
        "VersioningConfiguration": {"Status": "Enabled"},
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": ["*"],
              "AllowedMethods": ["PUT"],
              "AllowedOrigins": ["*"]
            }
          ]
        }
      }
    },
    "ImportClear": {
      "Type": "Custom::S3Clear",
      "DependsOn": ["CFNInvokePolicy"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": {"Ref": "ImportBucket"}
      }
    },
    "ImportTrigger": {
      "Type": "Custom::S3Lambda",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": {"Ref": "ImportBucket"},
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "LambdaFunctionArn": {"Fn::GetAtt": ["ImportStartLambda", "Arn"]},
              "Events": ["s3:ObjectCreated:*"],
              "Filter": {
                "Key": {"FilterRules": [{"Name": "prefix", "Value": "data"}]}
              }
            },
            {
              "LambdaFunctionArn": {"Fn::GetAtt": ["ImportStepLambda", "Arn"]},
              "Events": ["s3:ObjectCreated:*"],
              "Filter": {
                "Key": {"FilterRules": [{"Name": "prefix", "Value": "status"}]}
              }
            }
          ]
        }
      }
    },
    "ImportStartPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {"Fn::GetAtt": ["ImportStartLambda", "Arn"]},
        "Action": "lambda:InvokeFunction",
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {"Ref": "AWS::AccountId"},
        "SourceArn": {"Fn::Sub": "arn:aws:s3:::${ImportBucket}"}
      }
    },
    "ImportStepPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {"Fn::GetAtt": ["ImportStepLambda", "Arn"]},
        "Action": "lambda:InvokeFunction",
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {"Ref": "AWS::AccountId"},
        "SourceArn": {"Fn::Sub": "arn:aws:s3:::${ImportBucket}"}
      }
    },
    "ImportCodeVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": "aws-bigdata-blog",
        "Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/import.zip"},
        "BuildDate": "2018-07-23T13:52:42.890Z"
      }
    },
    "ImportStartLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/import.zip"},
          "S3ObjectVersion": {"Ref": "ImportCodeVersion"}
        },
        "Environment": {"Variables": {"STRIDE": "1000000"}},
        "Handler": "index.start",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["ImportRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Import"}]
      }
    },
    "ImportStepLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/import.zip"},
          "S3ObjectVersion": {"Ref": "ImportCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Fn::GetAtt": ["Var", "index"]},
            "ES_ENDPOINT": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
            "ES_PROXY": {"Fn::GetAtt": ["ESProxyLambda", "Arn"]}
          }
        },
        "Handler": "index.step",
        "MemorySize": "320",
        "Role": {"Fn::GetAtt": ["ImportRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Import"}]
      }
    },
    "ImportRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          {"Ref": "ImportPolicy"}
        ]
      }
    },
    "ImportPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:*"],
              "Resource": [{"Fn::Sub": "arn:aws:s3:::${ImportBucket}*"}]
            },
            {
              "Effect": "Allow",
              "Action": ["lambda:InvokeFunction"],
              "Resource": [{"Fn::GetAtt": ["ESProxyLambda", "Arn"]}]
            }
          ]
        }
      }
    },
    "QNAInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["FulfillmentLambda", "Arn"]},
        "Principal": "lex.amazonaws.com"
      }
    },
    "SlotType": {
      "Type": "Custom::LexSlotType",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "enumerationValues": [
          {"value": "what is a chat bot"},
          {"value": "exit"},
          {"value": "quit"},
          {"value": "start the quiz"},
          {"value": "how much does it cost"},
          {"value": "what is a data warehouse"},
          {"value": "what is coronary artery disease"},
          {"value": "what is an electric vehicle"},
          {"value": "tell me about amazon alexa"},
          {"value": "tell me about body mass index"},
          {"value": "tell me about healthy eating"},
          {"value": "how do I know if I am a linux expert"},
          {"value": "should I stop smoking"},
          {"value": "how bad is excessive alcohol consumption"},
          {"value": "do I get enough sleep"},
          {"value": "tell me about cloud computing"},
          {"value": "do I get enough exercise"},
          {"value": "what is a good training program for windows"},
          {"value": "is programming bad for you"},
          {"value": "is bacon good for you"},
          {"value": "what is a stack overflow"},
          {"value": "should I use a document store"},
          {"value": "give me advice on regular training"},
          {"value": "what are the benfits of a cardio workout"},
          {"value": "should I learn javascript programming"},
          {"value": "is working in support good for my career"},
          {"value": "where can i learn python"},
          {"value": "how quickly will I recover from triple bypass surgery"},
          {"value": "how quickly will I find employment after graduating"},
          {"value": "how serious is a core dump"},
          {"value": "what is a graphics processing unit"},
          {"value": "what should I do when i see errors in the logfile"},
          {"value": "tell me about serverless computing"},
          {"value": "are computer viruses serious"},
          {"value": "what is a slam dunk"},
          {"value": "what is a first down"},
          {"value": "what is normal blood pressure"},
          {"value": "how many people live in Ireland"},
          {"value": "how do I measure my volume"},
          {"value": "what car is the fastest from zero to sixty"},
          {"value": "tell me the benefits of green vegetables"},
          {"value": "when should I call emergency services"},
          {"value": "where is the nearest computer repair store"},
          {"value": "when should I hire a consultant"},
          {"value": "tell me about artificial intelligence"},
          {"value": "does my family history affect my risk"},
          {"value": "is is important to run regular backups"},
          {"value": "do I have an unusual appearance"},
          {"value": "is there a gene associated with musical ability"},
          {"value": "what is data science"},
          {"value": "how do I donate money"},
          {"value": "how do I volunteer time"},
          {"value": "tell me about the phrase life is good"},
          {"value": "will robots rule the world"},
          {"value": "hello"},
          {"value": "goodbye"},
          {"value": "feedback"},
          {"value": "End"},
          {"value": "One"},
          {"value": "Two"},
          {"value": "Three"},
          {"value": "next"},
          {"value": "previous"},
          {"value": "help"},
          {"value": "a"},
          {"value": "b"},
          {"value": "c"},
          {"value": "d"},
          {"value": "e"},
          {"value": "f"},
          {"value": "g"},
          {"value": "A"},
          {"value": "B"},
          {"value": "C"},
          {"value": "D"},
          {"value": "E"},
          {"value": "F"},
          {"value": "G"}
        ]
      }
    },
    "Intent": {
      "Type": "Custom::LexIntent",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "prefix": "fulfilment",
        "sampleUtterances": ["{slot}"],
        "slots": [
          {
            "name": "slot",
            "slotType": {"Ref": "SlotType"},
            "slotConstraint": "Optional",
            "slotTypeVersion": "$LATEST"
          }
        ],
        "fulfillmentActivity": {
          "type": "CodeHook",
          "codeHook": {
            "uri": {"Fn::GetAtt": ["FulfillmentLambda", "Arn"]},
            "messageVersion": "1.0"
          }
        }
      },
      "DependsOn": "QNAInvokePermission"
    },
    "LexBot": {
      "Type": "Custom::LexBot",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "name": {"Fn::Sub": "${AWS::StackName}-Bot"},
        "locale": "en-US",
        "voiceId": "Joanna",
        "childDirected": false,
        "intents": [
          {"intentName": {"Ref": "Intent"}, "intentVersion": "$LATEST"}
        ],
        "clarificationPrompt": {
          "maxAttempts": 5,
          "messages": [
            {
              "content": "Sorry, I did not understand that",
              "contentType": "PlainText"
            }
          ]
        },
        "abortStatement": {
          "messages": [
            {
              "content": "Sorry, I did not understand that",
              "contentType": "PlainText"
            }
          ]
        }
      }
    },
    "Alias": {
      "Type": "Custom::LexAlias",
      "DependsOn": "LexBot",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "botName": {"Ref": "LexBot"},
        "botVersion": "$LATEST"
      }
    },
    "Alexa": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["FulfillmentLambda", "Arn"]},
        "Principal": "alexa-appkit.amazon.com"
      }
    },
    "FulfillmentCodeVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": "aws-bigdata-blog",
        "Key": {
          "Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/fulfillment.zip"
        },
        "BuildDate": "2018-07-23T13:52:42.892Z"
      }
    },
    "FulfillmentLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {
            "Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/fulfillment.zip"
          },
          "S3ObjectVersion": {"Ref": "FulfillmentCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_TYPE": {"Fn::GetAtt": ["Var", "QnAType"]},
            "ES_INDEX": {"Fn::GetAtt": ["Var", "index"]},
            "ES_ADDRESS": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
            "LAMBDA_DEFAULT_QUERY": {"Ref": "ESQueryLambda"},
            "LAMBDA_LOG": {"Ref": "ESLoggingLambda"},
            "ES_SERVICE_QID": {"Ref": "ESQidLambda"},
            "ES_SERVICE_PROXY": {"Ref": "ESProxyLambda"},
            "ERRORMESSAGE": "Sadly I encountered an error when searching for your answer. Please ask me again later.",
            "EMPTYMESSAGE": "You stumped me! Sadly I don't know how to answer your question.",
            "ExamplePYTHONLambdaFeedback": {
              "Fn::GetAtt": [
                "ExamplesStack",
                "Outputs.ExamplePYTHONLambdaFeedback"
              ]
            },
            "ExamplePYTHONLambdaNext": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.ExamplePYTHONLambdaNext"]
            },
            "ExamplePYTHONLambdaPrevious": {
              "Fn::GetAtt": [
                "ExamplesStack",
                "Outputs.ExamplePYTHONLambdaPrevious"
              ]
            },
            "ExamplePYTHONLambdahello": {
              "Fn::GetAtt": [
                "ExamplesStack",
                "Outputs.ExamplePYTHONLambdahello"
              ]
            },
            "ExampleJSLambdaQuiz": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.ExampleJSLambdaQuiz"]
            },
            "ExampleJSLambdahello": {
              "Fn::GetAtt": ["ExamplesStack", "Outputs.ExampleJSLambdahello"]
            }
          }
        },
        "Handler": "index.handler",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["FulfillmentLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Fulfillment"}]
      }
    },
    "InvokePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["lambda:InvokeFunction"],
              "Resource": [
                "arn:aws:lambda:*:*:function:qna-*",
                "arn:aws:lambda:*:*:function:QNA-*",
                {"Fn::GetAtt": ["ESQueryLambda", "Arn"]},
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                {"Fn::GetAtt": ["ESLoggingLambda", "Arn"]},
                {"Fn::GetAtt": ["ESQidLambda", "Arn"]},
                {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaFeedback"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaNext"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaPrevious"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdahello"
                  ]
                },
                {
                  "Fn::GetAtt": ["ExamplesStack", "Outputs.ExampleJSLambdaQuiz"]
                },
                {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExampleJSLambdahello"
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [{"Ref": "FulfillmentLambdaRole"}]
      }
    },
    "FulfillmentLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          {"Ref": "EsPolicy"}
        ]
      }
    },
    "LexBuildLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {
            "Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/lex-build.zip"
          },
          "S3ObjectVersion": {"Ref": "LexBuildCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "UTTERANCE_BUCKET": {"Ref": "AssetBucket"},
            "UTTERANCE_KEY": "default-utterances.json",
            "POLL_LAMBDA": {"Fn::GetAtt": ["LexBuildLambdaPoll", "Arn"]},
            "STATUS_BUCKET": {"Ref": "BuildStatusBucket"},
            "STATUS_KEY": "status.json",
            "BOTNAME": {"Ref": "LexBot"},
            "BOTALIAS": {"Ref": "Alias"},
            "SLOTTYPE": {"Ref": "SlotType"},
            "INTENT": {"Ref": "Intent"},
            "ADDRESS": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
            "INDEX": {"Fn::GetAtt": ["Var", "index"]}
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["LexBuildLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "LexBuildLambdaStart": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar lambda=new aws.Lambda()\nvar lex=new aws.LexModelBuildingService\nvar s3=new aws.S3()\nvar crypto=require('crypto')\n\nexports.handler=function(event,context,callback){\n    var token=crypto.randomBytes(16).toString('base64')\n    return s3.putObject({\n        Bucket:process.env.STATUS_BUCKET,\n        Key:process.env.STATUS_KEY,\n        Body:JSON.stringify({\n            status:\"Starting\",\n            token:token\n        })\n    }).promise()\n    .then(function(){\n        return lambda.invoke({\n           FunctionName:process.env.BUILD_FUNCTION,\n           InvocationType:\"Event\",\n           Payload:\"{}\"\n        }).promise()\n    })\n    .then(()=>callback(null,{token}))\n    .catch(callback)\n}\n\n\n"
        },
        "Environment": {
          "Variables": {
            "STATUS_BUCKET": {"Ref": "BuildStatusBucket"},
            "STATUS_KEY": "status.json",
            "BUILD_FUNCTION": {"Fn::GetAtt": ["LexBuildLambda", "Arn"]}
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["LexBuildLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "LexBuildLambdaPoll": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar lambda=new aws.Lambda()\nvar lex=new aws.LexModelBuildingService\nvar s3=new aws.S3()\nvar crypto=require('crypto')\n\nexports.handler=function(event,context,callback){\n    return s3.getObject({\n        Bucket:process.env.STATUS_BUCKET,\n        Key:process.env.STATUS_KEY\n    }).promise()\n    .then(x=>JSON.parse(x.Body.toString()))\n    .then(status=>{\n        return lex.getBot({\n            name:process.env.BOT_NAME,\n            versionOrAlias:\"$LATEST\"\n        }).promise()\n        .then(result=>{\n            status.status=result.status\n            if(result.status===\"BUILDING\"){\n                return new Promise(function(res,rej){\n                    setTimeout(()=>{\n                        lambda.invoke({\n                           FunctionName:process.env.AWS_LAMBDA_FUNCTION_NAME,\n                           InvocationType:\"Event\",\n                           Payload:JSON.stringify(event)\n                        }).promise()\n                        .then(res).catch(rej)\n                    },2*1000    \n                    )\n                })\n            }else{\n                return s3.putObject({\n                    Bucket:process.env.STATUS_BUCKET,\n                    Key:process.env.STATUS_KEY,\n                    Body:JSON.stringify(status)\n                }).promise()\n            }\n        })\n    })\n    .then(()=>callback(null))\n    .catch(callback)\n}\n"
        },
        "Environment": {
          "Variables": {
            "STATUS_KEY": "status.json",
            "STATUS_BUCKET": {"Ref": "BuildStatusBucket"},
            "BOT_NAME": {"Ref": "LexBot"}
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["LexBuildLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "LexBuildCodeVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": "aws-bigdata-blog",
        "Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/lex-build.zip"},
        "BuildDate": "2018-07-23T13:52:42.893Z"
      }
    },
    "LexBuildInvokePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["lambda:InvokeFunction"],
              "Resource": [
                {"Fn::GetAtt": ["LexBuildLambda", "Arn"]},
                {"Fn::GetAtt": ["LexBuildLambdaPoll", "Arn"]}
              ]
            }
          ]
        },
        "Roles": [{"Ref": "LexBuildLambdaRole"}]
      }
    },
    "LexBuildLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "AssetBucketAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["s3:Get*"],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${AssetBucket}*"},
                    {"Fn::Sub": "arn:aws:s3:::${BuildStatusBucket}*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["s3:Put*"],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${BuildStatusBucket}*"}
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          {"Ref": "EsPolicy"},
          "arn:aws:iam::aws:policy/AmazonLexFullAccess"
        ]
      }
    },
    "BuildStatusBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {"NoncurrentVersionExpirationInDays": 1, "Status": "Enabled"},
            {
              "AbortIncompleteMultipartUpload": {"DaysAfterInitiation": 1},
              "Status": "Enabled"
            }
          ]
        },
        "VersioningConfiguration": {"Status": "Enabled"}
      }
    },
    "BuildStatusClear": {
      "Type": "Custom::S3Clear",
      "DependsOn": ["CFNInvokePolicy"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": {"Ref": "BuildStatusBucket"}
      }
    },
    "LexAccessPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["lex:PostContent", "lex:PostText"],
              "Resource": ["*"]
            },
            {
              "Effect": "Allow",
              "Action": ["polly:SynthesizeSpeech"],
              "Resource": ["*"]
            }
          ]
        },
        "Roles": {
          "Fn::If": [
            "Public",
            [
              {"Ref": "AdminRole"},
              {"Ref": "UnauthenticatedRole"},
              {"Ref": "UserRole"}
            ],
            [{"Ref": "AdminRole"}, {"Ref": "UserRole"}]
          ]
        }
      }
    },
    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["apigateway.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiGatewayLogsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ApiGatewayRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["apigateway.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        }
      }
    },
    "ESProxyCodeVersion": {
      "Type": "Custom::S3Version",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": "aws-bigdata-blog",
        "Key": {"Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/proxy-es.zip"},
        "BuildDate": "2018-07-23T13:52:42.894Z"
      }
    },
    "UtteranceLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {
            "Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/proxy-es.zip"
          },
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Fn::GetAtt": ["Var", "index"]},
            "ES_ADDRESS": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
            "UTTERANCE_BUCKET": {"Ref": "AssetBucket"},
            "UTTERANCE_KEY": "default-utterances.json"
          }
        },
        "Handler": "index.utterances",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Service"}]
      }
    },
    "ESQidLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {
            "Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/proxy-es.zip"
          },
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Fn::GetAtt": ["Var", "index"]},
            "ES_ADDRESS": {"Fn::GetAtt": ["ESVar", "ESAddress"]}
          }
        },
        "Handler": "index.qid",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Service"}]
      }
    },
    "ESCleaningLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {
            "Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/proxy-es.zip"
          },
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_INDEX": {"Fn::GetAtt": ["Var", "index"]},
            "ES_ADDRESS": {"Fn::GetAtt": ["ESVar", "ESAddress"]},
            "FEEDBACK_DELETE_RANGE_MINUTES": 43200,
            "METRICS_DELETE_RANGE_MINUTES": 43200
          }
        },
        "Handler": "index.cleanmetrics",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Service"}]
      }
    },
    "ScheduledESCleaning": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "",
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["ESCleaningLambda", "Arn"]},
            "Id": "ES_Cleaning_Function"
          }
        ]
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {"Ref": "ESCleaningLambda"},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["ScheduledESCleaning", "Arn"]}
      }
    },
    "ESLoggingLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {
            "Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/proxy-es.zip"
          },
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Environment": {
          "Variables": {"FIREHOSE_NAME": {"Ref": "GeneralFirehose"}}
        },
        "Handler": "index.logging",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESLoggingLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Logging"}]
      }
    },
    "ESQueryLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {
            "Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/proxy-es.zip"
          },
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ERRORMESSAGE": "Sadly I encountered an error when searching for your answer. Please ask me again later.",
            "EMPTYMESSAGE": "You stumped me! Sadly I don't know how to answer your question."
          }
        },
        "Handler": "index.query",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Query"}]
      }
    },
    "ESProxyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "aws-bigdata-blog",
          "S3Key": {
            "Fn::Sub": "artifacts/aws-ai-qna-bot210/lambda/proxy-es.zip"
          },
          "S3ObjectVersion": {"Ref": "ESProxyCodeVersion"}
        },
        "Environment": {
          "Variables": {
            "ES_TYPE": {"Fn::GetAtt": ["Var", "QnAType"]},
            "ES_INDEX": {"Fn::GetAtt": ["Var", "index"]},
            "ES_ADDRESS": {"Fn::GetAtt": ["ESVar", "ESAddress"]}
          }
        },
        "Handler": "index.handler",
        "MemorySize": "1408",
        "Role": {"Fn::GetAtt": ["ESProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Service"}]
      }
    },
    "ESProxyLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          {"Ref": "EsPolicy"},
          "arn:aws:iam::aws:policy/AmazonLexFullAccess"
        ]
      }
    },
    "ESLoggingLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LambdaGeneralFirehoseQNALambda",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["lambda:InvokeFunction"],
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":function:qna-*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:",
                          {"Ref": "AWS::Region"},
                          ":",
                          {"Ref": "AWS::AccountId"},
                          ":function:QNA-*"
                        ]
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["firehose:PutRecord", "firehose:PutRecordBatch"],
                  "Resource": [{"Fn::GetAtt": ["GeneralFirehose", "Arn"]}]
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "EsPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {"Effect": "Allow", "Action": ["es:*"], "Resource": ["*"]},
            {
              "Effect": "Allow",
              "Action": ["s3:Get*"],
              "Resource": [{"Fn::Sub": "arn:aws:s3:::${AssetBucket}*"}]
            }
          ]
        }
      }
    },
    "LexProxyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar lex=new aws.LexModelBuildingService()\n\nexports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    \n    lex[event.fnc](event.params).promise()\n    .then(function(x){\n        console.log(\"Response: \"+JSON.stringify(x,null,2))\n        callback(null,x)\n    })\n    .catch(function(y){\n        console.log(\"Error: \"+y)\n        callback(JSON.stringify({\n            type:\"[InternalServiceError]\",\n            data:y\n        }))\n    })\n};\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["LexProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "LexStatusLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar lex=new aws.LexModelBuildingService()\nvar s3=new aws.S3()\nexports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    \n    s3.getObject({\n        Bucket:process.env.STATUS_BUCKET,\n        Key:process.env.STATUS_KEY\n    }).promise()\n    .then(x=>JSON.parse(x.Body.toString()))\n    .catch(x=>{\n        console.log(x)\n        return {}\n    })\n    .then(result=>{\n        return lex.getBot({\n            name:process.env.BOT_NAME,\n            versionOrAlias:\"$LATEST\"\n        }).promise()\n        .then(bot=>{\n            bot.build=result\n            return bot\n        })\n    })\n    .then(function(x){\n        console.log(\"Response: \"+JSON.stringify(x,null,2))\n        callback(null,x)\n    })\n    .catch(function(y){\n        console.log(\"Error: \"+y)\n        callback(JSON.stringify({\n            type:\"[InternalServiceError]\",\n            data:y\n        }))\n    })\n};\n\n"
        },
        "Environment": {
          "Variables": {
            "STATUS_KEY": "status.json",
            "STATUS_BUCKET": {"Ref": "BuildStatusBucket"},
            "BOT_NAME": {"Ref": "LexBot"}
          }
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["LexProxyLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "LexProxyLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonLexFullAccess"
        ],
        "Policies": [
          {
            "PolicyName": "Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["s3:Get*"],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${BuildStatusBucket}*"}
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "KibanaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Federated": "cognito-identity.amazonaws.com"},
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {"Ref": "KibanaIdPool"}
                }
              }
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [],
        "Policies": []
      }
    },
    "AdminRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Federated": "cognito-identity.amazonaws.com"},
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {"Ref": "IdPool"}
                }
              }
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [],
        "Policies": [
          {
            "PolicyName": "apiAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["es:ESHttp*"],
                  "Resource": [{"Fn::GetAtt": ["ESVar", "ESArn"]}]
                },
                {
                  "Effect": "Allow",
                  "Action": ["execute-api:*"],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/*/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["s3:PutObject"],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${ImportBucket}/data/*"}
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["s3:GetObject"],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${ExportBucket}/data/*"}
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "UserRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Federated": "cognito-identity.amazonaws.com"},
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {"Ref": "IdPool"}
                }
              }
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": []
      }
    },
    "UnauthenticatedRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Federated": "cognito-identity.amazonaws.com"},
              "Action": "sts:AssumeRoleWithWebIdentity"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": []
      }
    },
    "CFNLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {"Effect": "Allow", "Action": ["es:*"], "Resource": ["*"]},
                {
                  "Effect": "Allow",
                  "Action": [
                    "lex:PutSlotType",
                    "lex:DeleteSlotType",
                    "lex:PutIntent",
                    "lex:DeleteIntent",
                    "lex:PutBot",
                    "lex:DeleteBot",
                    "lex:PutBotAlias",
                    "lex:DeleteBotAlias"
                  ],
                  "Resource": ["*"]
                },
                {
                  "Effect": "Allow",
                  "Action": ["apigateway:*"],
                  "Resource": ["*"]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-identity:SetIdentityPoolRoles",
                    "cognito-identity:GetIdentityPoolRoles",
                    "iam:PassRole",
                    "iam:CreateServiceLinkedRole"
                  ],
                  "Resource": ["*"]
                },
                {
                  "Effect": "Allow",
                  "Action": ["cognito-idp:*"],
                  "Resource": ["*"]
                },
                {
                  "Effect": "Allow",
                  "Action": ["s3:*"],
                  "Resource": [{"Fn::Sub": "arn:aws:s3:::*"}]
                }
              ]
            }
          }
        ]
      }
    },
    "Bot": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "bot",
        "RestApiId": {"Ref": "API"}
      }
    },
    "AlexaApi": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Bot"},
        "PathPart": "alexa",
        "RestApiId": {"Ref": "API"}
      }
    },
    "AlexaSchema": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["UtteranceLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set($utterances = $inputRoot.utterances)\n\n{\n  \"interactionModel\": {\n    \"languageModel\": {\n      \"invocationName\": \"q and a\",\n      \"types\": [\n        {\n          \"name\": \"EXAMPLE_QUESTIONS\",\n          \"values\": [\n            #foreach( $utterance in $utterances)\n                {\"name\":{\n                    \"value\":\"$utterance\" \n                }}#if( $foreach.hasNext ),#end\n            #end\n          ]\n        }\n      ],\n      \"intents\": [\n        {\n          \"slots\": [\n            {\n              \"name\": \"QnA_slot\",\n              \"type\": \"EXAMPLE_QUESTIONS\"\n            }\n          ],\n          \"name\": \"Qna_intent\",\n          \"samples\": [\n            \"{QnA_slot}\"\n          ]\n        },\n        {\n          \"name\": \"AMAZON.StopIntent\"\n        },\n        {\n          \"name\": \"AMAZON.CancelIntent\"\n        }\n      ]\n    }\n  }\n}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"name\":\"${SlotType}\",\n    \"version\":\"\\$LATEST\"\n}                \n               \n\n"
            }
          }
        },
        "ResourceId": {"Ref": "AlexaApi"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "BotPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["LexBuildLambdaStart", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{\"token\":\"$input.path('$.token')\"}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ]
        },
        "ResourceId": {"Ref": "Bot"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "BotGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["LexStatusLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${!stageVariables.Region}.amazonaws.com/${!context.stage}\")\n#set($inputRoot = $input.path('$'))\n\n{\n    \"lambdaArn\": \"${FulfillmentLambda.Arn}\",\n    \"lambdaRole\":\"${FulfillmentLambdaRole}\",\n    \"status\":\"$inputRoot.status\",\n    \"build\":$input.json('$.build'),\n    \"botname\":\"${LexBot}\",\n    \"botversion\":\"${Alias}\",\n    \"messages\":{\n        \"clarification\":[\n            #foreach($message in $input.path('$.clarificationPrompt.messages'))\n            \"$message.content\"#if( $foreach.hasNext ),#end\n            #end\n        ],\n        \"abort\":[\n            #foreach($message in $input.path('$.abortStatement.messages'))\n            \"$message.content\"#if( $foreach.hasNext ),#end\n            #end\n        ]\n    },\n    \"_links\":{\n        \"alexa\":{\n            \"href\":\"$root/bot/alexa\"\n        }\n    }\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"fnc\":\"getBot\",\n    \"params\":{\n        \"name\":\"${LexBot}\",\n        \"versionOrAlias\":\"\\$LATEST\"\n    }\n}                \n               \n\n"
            }
          }
        },
        "ResourceId": {"Ref": "Bot"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "BotDoc": {
      "Type": "AWS::ApiGateway::DocumentationPart",
      "Properties": {
        "Location": {"Type": "RESOURCE", "Path": "/bot"},
        "Properties": "{\"description\":\"\"}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "Health": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "health",
        "RestApiId": {"Ref": "API"}
      }
    },
    "HealthGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {"Fn::Sub": "{\"status\":\"health\"}\n\n"}
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"GET\",\n    \"path\":\"/_cluster/health\"\n}\n\n"
            }
          }
        },
        "ResourceId": {"Ref": "Health"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "rootGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${!stageVariables.Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"region\":\"${!stageVariables.Region}\",\n    \"Version\":\"${InfoVar.Version}\",\n    \"BuildDate\":\"${InfoVar.BuildDateString}\",\n    \"BotName\":\"${LexBot}\",\n    \"BotVersion\":\"${Alias}\",\n    \"PoolId\":\"${IdPool}\",\n    \"StackName\":\"${AWS::StackName}\",\n    \"ClientIdClient\":\"${ClientClient}\",\n    \"ClientIdDesigner\":\"${ClientDesigner}\",\n    \"UserPool\":\"${UserPool}\",\n    \"Id\":\"$stageVariables.Id\",\n    \"_links\":{\n        \"root\":{\n            \"href\":\"$root\"\n        },\n        \"questions\":{\n            \"href\":\"$root/questions\"\n        },\n        \"bot\":{\n            \"href\":\"$root/bot\"\n        },\n        \"jobs\":{\n            \"href\":\"$root/jobs\"\n        },\n        \"examples\":{\n            \"href\":\"$root/examples/documents\"\n        },\n        \"DesignerLogin\":{\n            \"href\":\"$stageVariables.DesignerLoginUrl\"\n        },\n        \"ClientLogin\":{\n            \"href\":\"$stageVariables.ClientLoginUrl\"\n        },\n        \"CognitoEndpoint\":{\n            \"href\":\"$stageVariables.CognitoEndpoint\"\n        },\n        \"Services\":{\n            \"href\":\"$root/services\"\n        },\n        \"Kibana\":{\n            \"href\":\"https://${Urls.Kibana}\"\n        }\n    }\n}\n\n"
                }
              },
              "StatusCode": "200"
            }
          ],
          "RequestTemplates": {"application/json": "{\"statusCode\": 200}"}
        },
        "ResourceId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "MethodResponses": [{"StatusCode": 200}],
        "RestApiId": {"Ref": "API"}
      }
    },
    "SchemaLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\n\nexports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    try {\n        es(event)\n        .then(function(result){ \n            var index=result[event.index].mappings\n            var mappings=Object.keys(index)\n            var out={}\n            mappings.forEach(val=>{\n                out[val]=index[val]._meta.schema\n            })\n            \n            callback(null,out)\n        })\n        .catch(x=>{\n            console.log(x)\n            callback(JSON.stringify({\n                type:\"[InternalServiceError]\",\n                data:x\n            }))\n        })\n    } catch(e){\n        callback(JSON.stringify({\n            type:\"[InternalServiceError]\",\n            data:e\n        }))\n    }\n}\nfunction test2string(obj){\n    console.log(obj) \n    if(obj.type===\"text\"){\n        obj.type=\"string\"\n    }\n\n    if(obj.properties){\n        Object.keys(obj.properties)\n        .map(x=>test2string(obj.properties[x]))\n    }\n    if(obj.items){\n        test2string(obj.items)\n    }\n}\nes = (event) => {\n    return new Promise(function(res,rej){\n        var endpoint =  new aws.Endpoint(event.endpoint);\n        var req = new aws.HttpRequest(endpoint);\n\n        req.method = event.method \n        req.path = event.path\n        req.region =aws.config.region;\n        if(event.body){\n            if(Array.isArray(event.body)){\n                req.body=event.body.map(JSON.stringify).join('\\n')\n            }else{\n                req.body = JSON.stringify(event.body)\n            }\n        }\n        req.headers['presigned-expires'] = false;\n        req.headers['Host'] = endpoint.host;\n\n        // Sign the request (Sigv4)\n        var signer = new aws.Signers.V4(req, 'es');\n        signer.addAuthorization(aws.config.credentials, new Date());\n\n        // Post document to ES\n        var send = new aws.NodeHttpClient();\n        send.handleRequest(req, null, \n            function(httpResp) {\n                var body = '';\n                httpResp.on('data', function (chunk) {\n                    body += chunk;\n                });\n                httpResp.on('end', function (chunk) {\n                    respond(httpResp,body,res,rej)\n                });\n            }, \n            function(err) {\n                console.log('Error: ' + err);\n                rej(err)\n            }\n        );\n    }\n)}\n\nfunction respond(httpResp,body,res,rej){\n    var status=httpResp.statusCode.toString()\n    console.log(\"status:\"+status)\n    if(status.match(/2../)){\n        console.log(\"Response:\" + body)\n        try{\n            var out=JSON.parse(body)\n            res(out) \n        }catch(e){\n            res(out) \n        }\n    }else{\n        console.log(httpResp.statusMessage)\n        rej(status)\n    }\n}\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["SchemaLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "SchemaLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          {"Ref": "EsPolicy"}
        ]
      }
    },
    "Questions": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "questions",
        "RestApiId": {"Ref": "API"}
      }
    },
    "QuestionsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n\n{\n    \"total\":$inputRoot.hits.total,\n    \"version\":\"1\",\n    \"qa\":[\n        #foreach( $hit in $inputRoot.hits.hits)\n            {\n                #set($Scorepath =  '$.hits.hits['+$foreach.index+']._score')\n                \"_score\":$input.json($Scorepath),\n                #set($Bodypath =  '$.hits.hits['+$foreach.index+']._source')\n                #foreach($paramName in $input.path($Bodypath).keySet())\n                    #if( $paramName == 'questions')\n                        \"q\":[\n                            #foreach( $question in $input.path($Bodypath).get($paramName))\n                                \"$question.q\"\n                                #if($foreach.hasNext),#end\n                            #end\n                        ]\n                    #else\n                        #set( $body =  $Bodypath+\".\"+$paramName)\n                        \"$paramName\" :$input.json($body) \n                    #end\n                #if($foreach.hasNext),#end\n                #end\n            }#if( $foreach.hasNext ),#end\n        #end\n    ]\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#if ( $input.params('perpage').length()==0 )\n    #set ( $perpage = 10 )\n#else\n    #set ( $perpage = $input.params('perpage') )\n#end\n\n#if ( $input.params('from').length()==0)\n    #set ( $from = 0 )\n#else\n    #set ( $from = $input.params('from') )\n#end\n\n{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"POST\",\n    #if($input.params('query').length()>0)\n        \"path\":\"/${Var.index}/${Var.QnAType}/_search?search_type=dfs_query_then_fetch\",\n    #else\n        \"path\":\"/${Var.index}/_search?search_type=dfs_query_then_fetch\",\n    #end\n    \"body\":{\n        \"size\":\"$perpage\",\n        \"from\":\"$from\",\n        \"query\": {\n            #if($input.params('query').length()>0)\n                #if ( !$input.params('topic') )\n                    #set ( $topic = \"\" )\n                #else\n                    #set ( $topic = $util.urlDecode($input.params('topic')) )\n                #end\n\n            \"bool\": {\n                \"should\": [{\n                    \"multi_match\": {\n                        \"query\": \"$util.urlDecode($input.params('query'))\",\n                        \"fields\" : [\"a\"]\n                    }},\n                    {\"multi_match\": {\n                        \"query\": \"$topic\",\n                        \"fields\" : [\"t\"]\n                    }},\n                    {\"nested\":{  \n                        \"path\":\"questions\",\n                        \"score_mode\":\"sum\",\n                        \"boost\":2,\n                        \"query\":{  \n                            \"match\":{  \n                                \"questions.q\":\"$util.urlDecode($input.params('query'))\"\n                            }\n                        }\n                    }} \n                ]\n            }\n            #end\n            #if($input.params('query').length()==0)\n            \"bool\":{\n                #if($input.params('filter').length()==0)\n                \"must\":{\"match_all\":{}}\n                #else\n                \"filter\":{\"regexp\":{\n                    \"qid\":\"$util.urlDecode($input.params('filter'))\"\n                }}\n                #end\n            }\n            #end\n        }\n        #if($input.params('query').length()==0)\n            #if ( $input.params('order').length()==0 )\n                #set ( $order = \"asc\" )\n            #else\n                #set ( $order = $input.params('order') )\n            #end\n\n        ,\"sort\":{\n            \"qid\":{\n                \"order\":\"$order\" \n            }\n        }\n        #end\n    }\n}\n\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.query": false,
          "method.request.querystring.topic": false,
          "method.request.querystring.from": false,
          "method.request.querystring.filter": false,
          "method.request.querystring.order": false,
          "method.request.querystring.perpage": false
        },
        "ResourceId": {"Ref": "Questions"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "QuestionsDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{\n    \"message\":\"success\",\n    \"count\":\"$input.path('$.deleted')\"\n}\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"POST\",\n    \"path\":\"/${Var.index}/_delete_by_query?refresh=wait_for\",\n    \"body\":{\n        \"query\":{\n            #if($input.path('$.query').length()!=0)\n            \"bool\":{\n                \"must\":{\"match_all\":{}},\n                \"filter\":{\"regexp\":{\n                    \"qid\":\"$input.path('$.query')\"\n                }}\n            }\n            #else\n            \"terms\":{\n                \"qid\":[\n                #foreach($qid in $input.path('$.list'))\n                    \"$qid\"#if($foreach.hasNext),#end\n                #end]\n            }\n            #end\n        }\n    }\n}\n\n\n"
            }
          }
        },
        "ResourceId": {"Ref": "Questions"},
        "MethodResponses": [
          {
            "StatusCode": 204,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Question": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Questions"},
        "PathPart": "{ID}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "QuestionHead": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "HEAD",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": {"Fn::Sub": "{\"status\":\"exists\"}\n"}
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"HEAD\",\n    \"path\":\"/${Var.index}/_all/$util.urlDecode($input.params('ID'))\"\n}\n\n\n"
            }
          }
        },
        "RequestParameters": {"method.request.path.Id": true},
        "ResourceId": {"Ref": "Question"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "QuestionPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "PUT",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 201,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set($Idpath =  '$._id')\n#set($Successpath =  '$._shards.successful')\n\n{\n    \"result\":\"$inputRoot.result\",\n    \"id\":$input.json($Idpath),\n    \"success\":$input.json($Successpath)\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($inputRoot = $input.path('$'))\n\n#if($input.json('$.type').length())\n    #set($type=$inputRoot.type)\n#else\n    #set($type=\"qna\")\n#end\n\n{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"PUT\",\n    \"path\":\"/${Var.index}/$type/$input.params('ID')?refresh=wait_for\",\n    \"body\":{\n        #foreach($paramName in $inputRoot.keySet())\n            #if( $paramName == 'q' && $type==\"qna\")\n                \"questions\":[\n                    #foreach( $q in $inputRoot.get($paramName))\n                        {\"q\":\"$q\"}\n                        #if($foreach.hasNext),#end\n                    #end\n                ]\n            #else\n                #set( $body =  '$.'+$paramName)\n                \"$paramName\" :$input.json($body) \n            #end\n        #if($foreach.hasNext),#end\n        #end\n    }\n}\n\n\n"
            }
          }
        },
        "RequestParameters": {"method.request.path.Id": true},
        "ResourceId": {"Ref": "Question"},
        "MethodResponses": [
          {
            "StatusCode": 201,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "QuestionsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["SchemaLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {"StatusCode": 200},
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"endpoint\":\"https://${ESVar.ESAddress}\",\n    \"method\":\"GET\",\n    \"path\":\"/${Var.index}/_mapping\",\n    \"index\":\"${Var.index}\"\n}\n\n"
            }
          }
        },
        "ResourceId": {"Ref": "Questions"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "QuestionDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 204,
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))\n#set($Idpath =  '$._id')\n#set($Successpath =  '$._shards.successful')\n\n{\n    \"result\":\"$inputRoot.result\",\n    \"id\":$input.json($Idpath),\n    \"success\":$input.json($Successpath)\n}\n\n"
                }
              }
            },
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{\n    \"endpoint\":\"${ESVar.ESAddress}\",\n    \"method\":\"POST\",\n    \"path\":\"/${Var.index}/_delete_by_query?refresh=wait_for\",\n    \"body\":{\n        \"query\":{\n            \"match\":{\n                \"qid\":\"$util.urlDecode($input.params('ID'))\"\n            }\n        }\n    }\n\n}\n\n\n"
            }
          }
        },
        "RequestParameters": {"method.request.path.Id": true},
        "ResourceId": {"Ref": "Question"},
        "MethodResponses": [
          {
            "StatusCode": 204,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Static": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "static",
        "RestApiId": {"Ref": "API"}
      }
    },
    "Proxy": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Static"},
        "PathPart": "{proxy+}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ProxyAnyGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "Bucket"},
                "/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
                "method.response.header.api-stage": "context.stage"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "Proxy"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.content-type": false,
              "method.response.header.api-stage": false
            }
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "ProxyAnyHead": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "HEAD",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "HEAD",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "Bucket"},
                "/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
                "method.response.header.api-stage": "context.stage"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "Proxy"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.content-type": false,
              "method.response.header.api-stage": false
            }
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Login": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "pages",
        "RestApiId": {"Ref": "API"}
      }
    },
    "DesignerLoginResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Login"},
        "PathPart": "designer",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ClientLoginResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Login"},
        "PathPart": "client",
        "RestApiId": {"Ref": "API"}
      }
    },
    "DesignerLoginResourceGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.location": {
                  "Fn::Join": [
                    "",
                    ["'", {"Fn::GetAtt": ["DesignerLogin", "loginUrl"]}, "'"]
                  ]
                }
              },
              "StatusCode": "302"
            }
          ],
          "RequestTemplates": {"application/json": "{\"statusCode\": 302}"}
        },
        "ResourceId": {"Ref": "DesignerLoginResource"},
        "MethodResponses": [
          {
            "StatusCode": 302,
            "ResponseParameters": {"method.response.header.location": true}
          }
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "ClientLoginResourceGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.location": {
                  "Fn::Join": [
                    "",
                    ["'", {"Fn::GetAtt": ["ClientLogin", "loginUrl"]}, "'"]
                  ]
                }
              },
              "StatusCode": "302"
            }
          ],
          "RequestTemplates": {"application/json": "{\"statusCode\": 302}"}
        },
        "ResourceId": {"Ref": "ClientLoginResource"},
        "MethodResponses": [
          {
            "StatusCode": 302,
            "ResponseParameters": {"method.response.header.location": true}
          }
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Jobs": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "jobs",
        "RestApiId": {"Ref": "API"}
      }
    },
    "JobsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${!stageVariables.Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"_links\":{\n        \"imports\":{\n            \"href\":\"$root/jobs/imports\",\n            \"bucket\":\"${ImportBucket}\",\n            \"uploadPrefix\":\"data/\",\n            \"statusPrefix\":\"Status/\"\n        },\n        \"exports\":{\n            \"href\":\"$root/jobs/exports\"\n        }\n    }\n}\n\n"
                }
              },
              "StatusCode": "200"
            }
          ],
          "RequestTemplates": {"application/json": "{\"statusCode\": 200}"}
        },
        "ResourceId": {"Ref": "Jobs"},
        "MethodResponses": [{"StatusCode": 200}],
        "RestApiId": {"Ref": "API"}
      }
    },
    "exports": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Jobs"},
        "PathPart": "exports",
        "RestApiId": {"Ref": "API"}
      }
    },
    "exportsList": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["S3ListLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {"StatusCode": 200},
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${!stageVariables.Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"bucket\":\"${ExportBucket}\",\n    \"prefix\":\"status/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"type\":\"exports\",\n    \"root\":\"$root\"\n}\n\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false
        },
        "ResourceId": {"Ref": "exports"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "export": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "exports"},
        "PathPart": "{proxy+}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "imports": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Jobs"},
        "PathPart": "imports",
        "RestApiId": {"Ref": "API"}
      }
    },
    "exportPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "PUT",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "PUT",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "ExportBucket"},
                "/status/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($inputRoot = $input.path('$'))\n\n{\n    \"bucket\":\"${ExportBucket}\",\n    \"index\":\"${Var.index}\",\n    \"id\":\"$input.params('proxy')\",\n    \"config\":\"status/$input.params('proxy')\",\n    \"tmp\":\"tmp/$input.params('proxy')\",\n    \"key\":\"data/$input.params('proxy')\",\n    \"filter\":\"$inputRoot.get('filter')\",\n    \"status\":\"Started\"\n}\n\n"
            }
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Job not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "export"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "exportGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "ExportBucket"},
                "/status/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Job not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "export"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "exportDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "DELETE",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "ExportBucket"},
                "/status/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Job not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "export"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "importsList": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["S3ListLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {"StatusCode": 200},
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${!stageVariables.Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"bucket\":\"${ImportBucket}\",\n    \"prefix\":\"status/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"type\":\"imports\",\n    \"root\":\"$root\"\n}\n\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false
        },
        "ResourceId": {"Ref": "imports"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "import": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "imports"},
        "PathPart": "{proxy+}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "importGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "ImportBucket"},
                "/status/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Job not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "import"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "importDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "DELETE",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "ImportBucket"},
                "/status/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Job not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "import"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "S3ListLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n   \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n    .then(x=>{\n        console.log(\"s3 response:\",JSON.stringify(x,null,2))\n        callback(null,{\n            token:x.NextMarker,\n            jobs:x.Contents.map(y=>{return {\n                id:y.Key.split('/').pop(),\n                href:`${event.root}/jobs/${event.type}/`+encodeURI(y.Key.split('/').pop())\n            }})\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\n\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["S3ListLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "S3ListLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          {"Ref": "S3ListPolicy"}
        ]
      }
    },
    "S3ListPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {"Effect": "Allow", "Action": ["S3:List*"], "Resource": ["*"]}
          ]
        }
      }
    },
    "Examples": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "examples",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ExamplesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"_links\":{\n        \"documents\":{\n            \"href\":\"$root/examples/documents\"\n        },\n        \"photos\":{\n            \"href\":\"$root/examples/photos\"\n        }\n    }\n}\n\n"
                }
              },
              "StatusCode": "200"
            }
          ],
          "RequestTemplates": {"application/json": "{\"statusCode\": 200}"}
        },
        "ResourceId": {"Ref": "Examples"},
        "MethodResponses": [{"StatusCode": 200}],
        "RestApiId": {"Ref": "API"}
      }
    },
    "photos": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Examples"},
        "PathPart": "photos",
        "RestApiId": {"Ref": "API"}
      }
    },
    "photosList": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ExampleS3ListPhotoLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {"StatusCode": 200},
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"bucket\":\"${AssetBucket}\",\n    \"prefix\":\"examples/photos/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"root\":\"$root\"\n}\n\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false
        },
        "ResourceId": {"Ref": "photos"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "photo": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "photos"},
        "PathPart": "{proxy+}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "photoGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "AssetBucket"},
                "/examples/photos/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not Found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "photo"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Documents": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Examples"},
        "PathPart": "documents",
        "RestApiId": {"Ref": "API"}
      }
    },
    "DocumentsList": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":lambda:path/2015-03-31/functions/",
                {"Fn::GetAtt": ["ExampleS3ListLambda", "Arn"]},
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {"StatusCode": 200},
            {
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            },
            {
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n\n\n{\n    \"type\":\"$errorMessageObj.type\",\n    \"message\":\"$errorMessageObj.message\",\n    \"data\":\"$errorMessageObj.data\"\n}\n\n"
              }
            }
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ( $root=\"https://${!context.apiId}.execute-api.${AWS::Region}.amazonaws.com/${!context.stage}\")\n\n{\n    \"bucket\":\"${AssetBucket}\",\n    \"prefix\":\"examples/documents/\",\n    \"perpage\":\"$input.params('perpage')\",\n    \"token\":\"$input.params('token')\",\n    \"root\":\"$root\"\n}\n\n"
            }
          }
        },
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false
        },
        "ResourceId": {"Ref": "Documents"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.date": true}
          },
          {"StatusCode": 404},
          {"StatusCode": 500}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Example": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Documents"},
        "PathPart": "{proxy+}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ExampleGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "AssetBucket"},
                "/examples/documents/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not Found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "Example"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "ExampleHead": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "HEAD",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "HEAD",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "AssetBucket"},
                "/examples/documents/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not Found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "Example"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {"method.response.header.content-type": false}
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "ExampleS3ListLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.photos = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n    .then(x=>{\n        console.log(\"s3 response:\",JSON.stringify(x,null,2))\n        var photos=x.Contents.map(function(value){\n            var key=value.Key.split('/').pop()\n            return `${event.root}/examples/photos/${key}`\n        },[])\n        callback(null,{\n            token:x.NextMarker,\n            photos\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\nexports.documents = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n   \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n    .then(x=>{\n        console.log(\"s3 response:\",JSON.stringify(x,null,2))\n        var examples=x.Contents.reduce(function(accum,value){\n            var key=value.Key.split('/').pop().split('.')\n            var ext=key.length >1 ? key.pop() : 'txt'\n            key=key[0]\n            var href=`${event.root}/examples/documents/${key}.${ext}`\n            if(!accum[key]){\n                accum[key]={id:key}\n            }\n            if(ext==='json'){\n                accum[key].document={href}\n            }else{\n                accum[key].description={href}\n            }\n            return accum\n        },[])\n        \n        callback(null,{\n            token:x.NextMarker,\n            examples:Object.keys(examples).map(x=>examples[x])\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\n\n\n"
        },
        "Handler": "index.documents",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["S3ListLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "ExampleS3ListPhotoLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var aws=require('aws-sdk')\naws.config.region=process.env.AWS_REGION\nvar s3=new aws.S3()\n\nexports.photos = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n    .then(x=>{\n        console.log(\"s3 response:\",JSON.stringify(x,null,2))\n        var photos=x.Contents.map(function(value){\n            var key=value.Key.split('/').pop()\n            return `${event.root}/examples/photos/${key}`\n        },[])\n        callback(null,{\n            token:x.NextMarker,\n            photos\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\nexports.documents = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n   \n    return s3.listObjects({\n        Bucket:event.bucket,\n        Prefix:event.prefix,\n        MaxKeys:event.perpage || 100,\n        Marker:event.token || null\n    }).promise()\n    .then(x=>{\n        console.log(\"s3 response:\",JSON.stringify(x,null,2))\n        var examples=x.Contents.reduce(function(accum,value){\n            var key=value.Key.split('/').pop().split('.')\n            var ext=key.length >1 ? key.pop() : 'txt'\n            key=key[0]\n            var href=`${event.root}/examples/documents/${key}.${ext}`\n            if(!accum[key]){\n                accum[key]={id:key}\n            }\n            if(ext==='json'){\n                accum[key].document={href}\n            }else{\n                accum[key].description={href}\n            }\n            return accum\n        },[])\n        \n        callback(null,{\n            token:x.NextMarker,\n            examples:Object.keys(examples).map(x=>examples[x])\n        })\n    })\n    .catch(e=>callback(JSON.stringify({\n        type:\"[InternalServiceError]\",\n        data:e\n    })))\n}\n\n\n"
        },
        "Handler": "index.photos",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt": ["S3ListLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Api"}]
      }
    },
    "Services": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "services",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ServicesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{\n    \"elasticsearch\":{\n        \"qid\":\"${ESQidLambda.Arn}\",\n        \"proxy\":\"${ESProxyLambda.Arn}\"\n    }\n}\n\n"
                }
              },
              "StatusCode": "200"
            }
          ],
          "RequestTemplates": {"application/json": "{\"statusCode\": 200}"}
        },
        "ResourceId": {"Ref": "Services"},
        "MethodResponses": [{"StatusCode": 200}],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Images": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Fn::GetAtt": ["API", "RootResourceId"]},
        "PathPart": "images",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ImagesProxy": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {"Ref": "Images"},
        "PathPart": "{proxy+}",
        "RestApiId": {"Ref": "API"}
      }
    },
    "ImagesProxyGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "GET",
          "Credentials": {"Fn::GetAtt": ["S3AccessRole", "Arn"]},
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {"Ref": "AWS::Region"},
                ":s3:path/",
                {"Ref": "Bucket"},
                "/assets/{proxy}"
              ]
            ]
          },
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ContentHandling": "CONVERT_TO_BINARY",
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
                "method.response.header.api-stage": "context.stage"
              }
            },
            {
              "StatusCode": 404,
              "ResponseTemplates": {
                "application/xml": "{\"error\":\"Not found\"}"
              },
              "SelectionPattern": "403"
            }
          ]
        },
        "RequestParameters": {"method.request.path.proxy": false},
        "ResourceId": {"Ref": "ImagesProxy"},
        "MethodResponses": [
          {
            "StatusCode": 200,
            "ResponseParameters": {
              "method.response.header.content-type": false,
              "method.response.header.api-stage": false
            }
          },
          {"StatusCode": 400},
          {"StatusCode": 404}
        ],
        "RestApiId": {"Ref": "API"}
      }
    },
    "Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Delete",
      "Properties": {"WebsiteConfiguration": {"IndexDocument": "index.html"}}
    },
    "Clear": {
      "Type": "Custom::S3Clear",
      "DependsOn": ["CFNInvokePolicy"],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Bucket": {"Ref": "Bucket"}
      }
    },
    "Unzip": {
      "Type": "Custom::S3Unzip",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "SrcBucket": "aws-bigdata-blog",
        "Key": {
          "Fn::Join": ["", ["artifacts/aws-ai-qna-bot210", "/website.zip"]]
        },
        "DstBucket": {"Ref": "Bucket"},
        "buildDate": "2018-07-23T13:52:42.895Z"
      },
      "DependsOn": "Clear"
    },
    "S3AccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "apigateway.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [{"Ref": "S3AccessPolicy"}]
      }
    },
    "S3AccessPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {"Effect": "Allow", "Action": ["lex:*"], "Resource": "*"},
            {
              "Effect": "Allow",
              "Action": ["s3:GetObject"],
              "Resource": [
                {"Fn::Sub": "arn:aws:s3:::${ImportBucket}/*"},
                {"Fn::Sub": "arn:aws:s3:::${ExportBucket}/*"},
                {"Fn::Sub": "arn:aws:s3:::${Bucket}/*"},
                {"Fn::Sub": "arn:aws:s3:::${AssetBucket}/*"}
              ]
            },
            {
              "Effect": "Allow",
              "Action": ["s3:PutObject"],
              "Resource": [{"Fn::Sub": "arn:aws:s3:::${ExportBucket}/*"}]
            },
            {
              "Effect": "Allow",
              "Action": ["s3:DeleteObject"],
              "Resource": [
                {"Fn::Sub": "arn:aws:s3:::${ImportBucket}/*"},
                {"Fn::Sub": "arn:aws:s3:::${ExportBucket}/*"}
              ]
            }
          ]
        }
      }
    },
    "SignupPermision": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["SignupLambda", "Arn"]},
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["UserPool", "Arn"]}
      }
    },
    "MessagePermision": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["MessageLambda", "Arn"]},
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["UserPool", "Arn"]}
      }
    },
    "MessageLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    var approvedDomain = process.env.APPROVED_DOMAIN;\n\n    if(approvedDomain){\n        var regex=new RegExp(`^[A-Za-z0-9._%+-]+@${approvedDomain}$`)\n        if (event.request.userAttributes.email.match(regex)) {\n            event.response.emailSubject = subject;\n            event.response.emailMessage = message(\n                event.request.codeParameter,\n                event.request.usernameParameter\n            );\n            context.done(null, event);\n        } else {\n            var error = new Error('EMAIL_DOMAIN_DENIED_ERR');\n            context.done(error, event);\n        }\n    }else{\n        event.response.emailSubject = subject;\n        event.response.emailMessage = message(event.request.codeParameter);\n        context.done(null, event);\n    }\n};\n\nvar subject=\"QnABot Signup Verification Code\";\nfunction message(code,name){\n    return `Hello, Your QnABot verification code is: ${code}`\n}\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Environment": {
          "Variables": {
            "APPROVED_DOMAIN": {
              "Fn::If": ["Domain", "EMPTY", {"Ref": "AWS::NoValue"}]
            }
          }
        },
        "Role": {"Fn::GetAtt": ["SignupLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Cognito"}]
      }
    },
    "SignupLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = (event, context, callback) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    var approvedDomain = process.env.APPROVED_DOMAIN;\n    \n    if(approvedDomain){\n        var regex=new RegExp(`^[A-Za-z0-9._%+-]+@${approvedDomain}$`)\n        if (event.request.userAttributes.email.match(regex)) {\n            context.done(null, event);\n        }else{\n            var error = new Error('EMAIL_DOMAIN_DENIED_ERR');\n            context.done(error, event);\n        }\n    }else{\n        context.done(null,event) \n    }\n};\n\n"
        },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Environment": {
          "Variables": {
            "APPROVED_DOMAIN": {
              "Fn::If": ["Domain", "EMPTY", {"Ref": "AWS::NoValue"}]
            }
          }
        },
        "Role": {"Fn::GetAtt": ["SignupLambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 300,
        "Tags": [{"Key": "Type", "Value": "Cognito"}]
      }
    },
    "SignupLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "Var": {
      "Type": "Custom::Variable",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "index": {"value": {"Ref": "AWS::StackName"}, "op": "toLowerCase"},
        "QnAType": "qna",
        "QuizType": "quiz"
      }
    },
    "InfoVar": {
      "Type": "Custom::Variable",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Version": "2.1.0",
        "BuildDateString": "Mon Jul 23 2018 09:52:42 GMT-0400 (EDT)",
        "BuildDate": "2018-07-23T13:52:42.896Z"
      }
    },
    "ESVar": {
      "Type": "Custom::Variable",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "ESArn": {
          "Fn::If": [
            "CreateDomain",
            {"Fn::GetAtt": ["ElasticsearchDomain", "DomainArn"]},
            {"Fn::GetAtt": ["ESInfo", "Arn"]}
          ]
        },
        "ESAddress": {
          "Fn::If": [
            "CreateDomain",
            {"Fn::GetAtt": ["ElasticsearchDomain", "DomainEndpoint"]},
            {"Fn::GetAtt": ["ESInfo", "Endpoint"]}
          ]
        },
        "ESDomain": {
          "Fn::If": ["CreateDomain", {"Ref": "ElasticsearchDomain"}, "EMPTY"]
        },
        "MetricsIndex": {"Fn::Sub": "${Var.index}-metrics"},
        "FeedbackIndex": {"Fn::Sub": "${Var.index}-feedback"}
      }
    },
    "ApiUrl": {
      "Type": "Custom::Variable",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Name": {
          "Fn::Join": [
            "",
            [
              "https://",
              {"Ref": "API"},
              ".execute-api.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/prod"
            ]
          ]
        }
      }
    },
    "Urls": {
      "Type": "Custom::Variable",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "Designer": {
          "Fn::Join": [
            "",
            [{"Fn::GetAtt": ["ApiUrl", "Name"]}, "/static/index.html"]
          ]
        },
        "Client": {
          "Fn::Join": [
            "",
            [{"Fn::GetAtt": ["ApiUrl", "Name"]}, "/static/client.html"]
          ]
        },
        "Kibana": {"Fn::Sub": "${ESVar.ESAddress}/_plugin/kibana/"}
      }
    },
    "API": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {"Ref": "AWS::StackName"},
        "Description": "An Api interface for the admin actions on the QNA bot",
        "BinaryMediaTypes": ["image/png"]
      }
    },
    "ApiCompression": {
      "Type": "Custom::ApiCompression",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "restApiId": {"Ref": "API"},
        "value": "500000"
      }
    },
    "Deployment": {
      "Type": "Custom::ApiDeployment",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["CFNLambda", "Arn"]},
        "restApiId": {"Ref": "API"},
        "buildDate": "2018-07-23T13:52:42.897Z",
        "stage": "prod"
      },
      "DependsOn": [
        "AlexaSchema",
        "BotPost",
        "BotGet",
        "HealthGet",
        "rootGet",
        "QuestionsGet",
        "QuestionsDelete",
        "QuestionHead",
        "QuestionPut",
        "QuestionsOptions",
        "QuestionDelete",
        "ProxyAnyGet",
        "ProxyAnyHead",
        "DesignerLoginResourceGet",
        "ClientLoginResourceGet",
        "JobsGet",
        "exportsList",
        "exportPut",
        "exportGet",
        "exportDelete",
        "importsList",
        "importGet",
        "importDelete",
        "ExamplesGet",
        "photosList",
        "photoGet",
        "DocumentsList",
        "ExampleGet",
        "ExampleHead",
        "ServicesGet",
        "ImagesProxyGet",
        "InvokePermissionLexBuildLambdaStart",
        "InvokePermissionUtteranceLambda",
        "InvokePermissionESQidLambda",
        "InvokePermissionESCleaningLambda",
        "InvokePermissionESProxyLambda",
        "InvokePermissionLexProxyLambda",
        "InvokePermissionSchemaLambda",
        "InvokePermissionS3ListLambda",
        "InvokePermissionExampleS3ListLambda",
        "InvokePermissionExampleS3ListPhotoLambda"
      ]
    },
    "Stage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "Deployment"},
        "RestApiId": {"Ref": "API"},
        "StageName": "prod",
        "MethodSettings": [
          {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*"
          }
        ],
        "Variables": {
          "Id": "QnABot",
          "Region": {"Ref": "AWS::Region"},
          "CognitoEndpoint": {"Fn::GetAtt": ["DesignerLogin", "Domain"]},
          "DesignerLoginUrl": {
            "Fn::Join": [
              "",
              [{"Fn::GetAtt": ["ApiUrl", "Name"]}, "/pages/designer"]
            ]
          },
          "ClientLoginUrl": {
            "Fn::If": [
              "Public",
              {"Fn::GetAtt": ["Urls", "Client"]},
              {
                "Fn::Join": [
                  "",
                  [{"Fn::GetAtt": ["ApiUrl", "Name"]}, "/pages/client"]
                ]
              }
            ]
          }
        }
      }
    },
    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": ["ApiGatewayCloudWatchLogsRole", "Arn"]
        }
      }
    },
    "DocumentationVersion": {
      "Type": "AWS::ApiGateway::DocumentationVersion",
      "DependsOn": ["BotDoc"],
      "Properties": {
        "Description": "",
        "DocumentationVersion": "1.0",
        "RestApiId": {"Ref": "API"}
      }
    },
    "InvokePermissionLexBuildLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["LexBuildLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionLexBuildLambdaStart": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["LexBuildLambdaStart", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionLexBuildLambdaPoll": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["LexBuildLambdaPoll", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionUtteranceLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["UtteranceLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionESQidLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ESQidLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionESCleaningLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ESCleaningLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionESProxyLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ESProxyLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionLexProxyLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["LexProxyLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionLexStatusLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["LexStatusLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionSchemaLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["SchemaLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionS3ListLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["S3ListLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionExampleS3ListLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ExampleS3ListLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "InvokePermissionExampleS3ListPhotoLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["ExampleS3ListPhotoLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "LambdaAccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "apigateway.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          {"Ref": "LambdaPolicy"}
        ]
      }
    },
    "LambdaPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {"Effect": "Allow", "Action": ["lambda:*"], "Resource": ["*"]}
          ]
        }
      }
    },
    "dashboard": {
      "Type": "AWS::CloudWatch::Dashboard",
      "Properties": {
        "DashboardName": {"Fn::Sub": "${AWS::Region}-${AWS::StackName}"},
        "DashboardBody": {
          "Fn::Sub": "{\"widgets\":[{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":0,\"properties\":{\"markdown\":\"# QnABot:${AWS::StackName} Dashboard\"}},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":3,\"properties\":{\"markdown\":\"## Lex \"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lex\",\"MissedUtteranceCount\",\"BotVersion\",\"$LATEST\",\"Operation\",\"PostText\",\"BotName\",\"${Bot}\"],[\".\",\"RuntimeSucessfulRequestLatency\",\".\",\".\",\".\",\".\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"RuntimeRequestCount\",\".\",\".\",\".\",\".\",\".\",\".\"]],\"region\":\"${AWS::Region}\",\"title\":\"Lex Utterances/Latency\"},\"height\":6,\"width\":6,\"x\":0,\"y\":5},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":12,\"properties\":{\"markdown\":\"## ElasticSearch\"}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"ReadLatency\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"613341023709\"]],\"region\":\"us-east-1\"},\"x\":0,\"y\":14},{\"type\":\"metric\",\"width\":6,\"height\":6,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"ReadIOPS\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"613341023709\"],[\".\",\"ReadThroughput\",\".\",\".\",\".\",\".\",{\"yAxis\":\"right\"}]],\"region\":\"us-east-1\"},\"x\":6,\"y\":14},{\"type\":\"metric\",\"width\":6,\"height\":6,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"CPUUtilization\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"613341023709\"]],\"region\":\"us-east-1\"},\"x\":12,\"y\":14},{\"type\":\"metric\",\"x\":18,\"y\":14,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"ClusterUsedSpace\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"613341023709\"],[\".\",\"SearchableDocuments\",\".\",\".\",\".\",\".\",{\"yAxis\":\"right\"}]],\"region\":\"us-east-1\"},\"height\":6,\"width\":6},{\"type\":\"metric\",\"width\":6,\"height\":6,\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/ES\",\"ClusterStatus.green\",\"DomainName\",\"${ESVar.ESDomain}\",\"ClientId\",\"613341023709\",{\"color\":\"#2ca02c\"}],[\".\",\"ClusterStatus.red\",\".\",\".\",\".\",\".\",{\"color\":\"#d62728\"}],[\".\",\"ClusterStatus.yellow\",\".\",\".\",\".\",\".\",{\"color\":\"#bcbd22\"}]],\"region\":\"us-east-1\"},\"x\":0,\"y\":20},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":33,\"properties\":{\"markdown\":\"## Lambda Function\"}},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":35,\"properties\":{\"markdown\":\"### CustomResource\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${VersionLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"VersionLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":37},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${CFNLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"CFNLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":37},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESCFNProxyLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESCFNProxyLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":37},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":43,\"properties\":{\"markdown\":\"### Export\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ExportStepLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ExportStepLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":45},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":51,\"properties\":{\"markdown\":\"### Import\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ImportStartLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ImportStartLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":53},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ImportStepLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ImportStepLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":53},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":59,\"properties\":{\"markdown\":\"### Fulfillment\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${FulfillmentLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"FulfillmentLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":61},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":67,\"properties\":{\"markdown\":\"### Api\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexBuildLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexBuildLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":69},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexBuildLambdaStart}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexBuildLambdaStart\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":69},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexBuildLambdaPoll}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexBuildLambdaPoll\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":69},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexProxyLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexProxyLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":69},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${LexStatusLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"LexStatusLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":75},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${SchemaLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"SchemaLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":75},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${S3ListLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"S3ListLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":75},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ExampleS3ListLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ExampleS3ListLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":75},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ExampleS3ListPhotoLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ExampleS3ListPhotoLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":81},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":87,\"properties\":{\"markdown\":\"### Service\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${UtteranceLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"UtteranceLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":89},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESQidLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESQidLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":89},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESCleaningLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESCleaningLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":12,\"y\":89},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESProxyLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESProxyLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":18,\"y\":89},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":95,\"properties\":{\"markdown\":\"### Logging\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESLoggingLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESLoggingLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":97},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":103,\"properties\":{\"markdown\":\"### Query\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${ESQueryLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"ESQueryLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":105},{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":111,\"properties\":{\"markdown\":\"### Cognito\"}},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${MessageLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"MessageLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":0,\"y\":113},{\"type\":\"metric\",\"properties\":{\"view\":\"timeSeries\",\"stacked\":false,\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"${SignupLambda}\",{\"stat\":\"Sum\"}],[\".\",\"Invocations\",\".\",\".\",{\"stat\":\"Sum\"}],[\".\",\"Duration\",\".\",\".\",{\"yAxis\":\"right\"}],[\".\",\"Throttles\",\".\",\".\",{\"stat\":\"Sum\"}]],\"region\":\"${AWS::Region}\",\"title\":\"SignupLambda\",\"period\":300},\"height\":6,\"width\":6,\"x\":6,\"y\":113}]}"
        }
      }
    }
  },
  "Conditions": {
    "Public": {"Fn::Equals": [true, true]},
    "AdminSignUp": {"Fn::Equals": [true, true]},
    "Domain": {"Fn::Equals": [true, false]},
    "BuildExamples": {"Fn::Equals": [true, true]},
    "CreateDomain": {"Fn::Equals": [true, true]},
    "DontCreateDomain": {"Fn::Equals": [true, false]}
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "QnABot with admin and client websites",
  "Mappings": {},
  "Outputs": {
    "ContentDesignerURL": {
      "Value": {
        "Fn::Join": [
          "",
          [{"Fn::GetAtt": ["ApiUrl", "Name"]}, "/pages/designer"]
        ]
      }
    },
    "ClientURL": {
      "Value": {
        "Fn::If": [
          "Public",
          {"Fn::GetAtt": ["Urls", "Client"]},
          {
            "Fn::Join": [
              "",
              [{"Fn::GetAtt": ["ApiUrl", "Name"]}, "/pages/client"]
            ]
          }
        ]
      }
    },
    "DashboardURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/cloudwatch/home?",
            "region=",
            {"Ref": "AWS::Region"},
            "#dashboards:name=",
            {"Ref": "dashboard"}
          ]
        ]
      }
    },
    "UserPoolURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/cognito/users/",
            "?region=",
            {"Ref": "AWS::Region"},
            "#/pool/",
            {"Ref": "UserPool"},
            "/details"
          ]
        ]
      }
    },
    "BotName": {"Value": {"Ref": "LexBot"}},
    "BotAlias": {"Value": {"Ref": "Alias"}},
    "Intent": {"Value": {"Ref": "Intent"}}
  },
  "Parameters": {
    "Email": {
      "Type": "String",
      "Description": "Email address for the admin user. Will be used for loging in and for setting the admin password. This email will receive the temporary password for the admin user.",
      "AllowedPattern": ".+\\@.+\\..+",
      "ConstraintDescription": "Must be valid email address eg. johndoe@example.com"
    },
    "Username": {
      "Type": "String",
      "Description": "Administrator username",
      "Default": "Admin"
    }
  }
}